{
  "version": 3,
  "sources": ["../src/set-auto-quit-app.tsx", "../src/hooks/hooks.ts", "../src/utils/constants.ts", "../src/utils/applescript-utils.ts", "../src/types/preferences.ts", "../src/components/auto-quit-app-list-layout.tsx", "../src/components/auto-quit-app-list-item.tsx", "../src/components/action-on-app.tsx", "../src/components/action-open-preferences.tsx", "../src/components/auto-quit-app-empty-view.tsx", "../src/components/auto-quit-app-grid-layout.tsx", "../src/components/auto-quit-app-grid-item.tsx", "../src/utils/common-utils.ts"],
  "sourcesContent": ["import { useAllApps } from \"./hooks/hooks\";\nimport { useState } from \"react\";\nimport { layout } from \"./types/preferences\";\nimport { AutoQuitAppListLayout } from \"./components/auto-quit-app-list-layout\";\nimport { AutoQuitAppGridLayout } from \"./components/auto-quit-app-grid-layout\";\n\nexport default function SetAutoQuitApp() {\n  const [refresh, setRefresh] = useState<number>(0);\n  const { quitApps, disQuitApps, loading } = useAllApps(refresh);\n\n  return layout === \"List\" ? (\n    <AutoQuitAppListLayout quitApp={quitApps} disQuitApp={disQuitApps} setRefresh={setRefresh} loading={loading} />\n  ) : (\n    <AutoQuitAppGridLayout quitApp={quitApps} disQuitApp={disQuitApps} setRefresh={setRefresh} loading={loading} />\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { Application, environment, getApplications, LaunchType } from \"@raycast/api\";\nimport { CacheKey, defaultCache } from \"../utils/constants\";\nimport { scriptQuitAppsWithoutWindow } from \"../utils/applescript-utils\";\nimport { refreshInterval } from \"../types/preferences\";\n\nexport const useAllApps = (refresh: number) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [quitApps, setQuitApps] = useState<Application[]>([]);\n  const [disQuitApps, setDisQuitApps] = useState<Application[]>([]);\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    const allApps = await getApplications();\n    const quitAppsString = defaultCache.get(CacheKey.QUIT_APP);\n    let quitApps: Application[] = [];\n    if (typeof quitAppsString == \"string\") {\n      quitApps = JSON.parse(quitAppsString);\n    }\n    const disQuitApps = allApps.filter((allApp) => !quitApps.some((quitApp) => allApp.bundleId == quitApp.bundleId));\n    setQuitApps(quitApps);\n    setDisQuitApps(disQuitApps);\n    setLoading(false);\n  }, [refresh]);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { quitApps: quitApps, disQuitApps: disQuitApps, loading: loading };\n};\n\nexport const useEnabledQuitApps = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [quitApps, setQuitApps] = useState<Application[]>([]);\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    let enabledQuitApps: Application[] = [];\n    try {\n      const quitAppsString = defaultCache.get(CacheKey.QUIT_APP);\n      if (typeof quitAppsString == \"string\") {\n        enabledQuitApps = JSON.parse(quitAppsString);\n      }\n      setQuitApps(enabledQuitApps);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // Quit Apps\n    if (environment.launchType == LaunchType.Background) {\n      const refreshIntervalString = defaultCache.get(CacheKey.REFRESH_INTERVAL);\n      let realRefreshInterval = 5;\n      if (typeof refreshIntervalString == \"string\") {\n        realRefreshInterval = parseInt(refreshIntervalString);\n      }\n      if (realRefreshInterval == refreshInterval) {\n        await scriptQuitAppsWithoutWindow(enabledQuitApps);\n        defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n      } else {\n        const nextRefreshInterval = realRefreshInterval + 5;\n        if (nextRefreshInterval > refreshInterval) {\n          await scriptQuitAppsWithoutWindow(enabledQuitApps);\n          defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n        } else {\n          defaultCache.set(CacheKey.REFRESH_INTERVAL, String(nextRefreshInterval));\n        }\n      }\n    } else {\n      await scriptQuitAppsWithoutWindow(enabledQuitApps);\n      defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { quitApps: quitApps, loading: loading };\n};\n", "import { Cache } from \"@raycast/api\";\n\nexport enum CacheKey {\n  QUIT_APP = \"Quit App\",\n  REFRESH_INTERVAL = \"Refresh Interval\",\n}\n\nexport const defaultCache = new Cache();\n", "import { runAppleScript } from \"run-applescript\";\nimport { Application, getFrontmostApplication } from \"@raycast/api\";\n\nexport async function scriptQuitAppsWithoutWindow(apps: Application[]) {\n  for (let i = 0; i < apps.length; i++) {\n    try {\n      const appName = apps[i].name;\n      if (\n        (await scriptIsRunning(appName)) &&\n        !(await IsFrontmostApp(appName)) &&\n        !(await scriptGetAppWindow(appName))\n      ) {\n        const script = `\ntell application \"${appName}\"\n   quit\nend tell`;\n        await runAppleScript(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport async function scriptQuitApps(apps: Application[]) {\n  for (let i = 0; i < apps.length; i++) {\n    try {\n      const appName = apps[i].name;\n      const isRunning = await scriptIsRunning(appName);\n      if (isRunning) {\n        const script = `tell application \"${appName}\"\n   quit\nend tell`;\n        await runAppleScript(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nasync function IsFrontmostApp(applicationName: string | undefined) {\n  try {\n    const app = await getFrontmostApplication();\n    return app?.name == applicationName;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nasync function scriptIsRunning(appName: string | undefined) {\n  const script = `if application \"${appName}\" is running then\n\treturn true\nelse\n\treturn false\nend if`;\n  try {\n    const isRunning = await runAppleScript(script);\n    return isRunning == \"true\";\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nasync function scriptGetAppWindow(appName: string | undefined) {\n  const script = `set appName to \"${appName}\"\nif application appName is running then\n  tell application \"System Events\" to tell process appName\n    set windowCount to count of (get every window)\n    return windowCount > 0\n  end tell\n  return false\nend if\n`;\n  try {\n    const hasWindow = await runAppleScript(script);\n    return hasWindow == \"true\";\n  } catch (e) {\n    return false;\n  }\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\nexport interface Preferences {\n  layout: string;\n  columns: string;\n  itemInset: string;\n  refreshInterval: number;\n}\n\nexport const { layout, columns, itemInset, refreshInterval } = getPreferenceValues<Preferences>();\n", "import React from \"react\";\nimport { Application, List } from \"@raycast/api\";\nimport { AutoQuitAppListItem } from \"./auto-quit-app-list-item\";\nimport { AutoQuitAppEmptyView } from \"./auto-quit-app-empty-view\";\n\nexport function AutoQuitAppListLayout(props: {\n  quitApp: Application[];\n  disQuitApp: Application[];\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  loading: boolean;\n}) {\n  const { quitApp, disQuitApp, setRefresh, loading } = props;\n  return (\n    <List isLoading={loading} searchBarPlaceholder={\"Search apps\"}>\n      <AutoQuitAppEmptyView />\n\n      <List.Section title=\"Quit Apps\">\n        {quitApp.map((app) => {\n          return <AutoQuitAppListItem key={app.path} setRefresh={setRefresh} app={app} apps={quitApp} />;\n        })}\n      </List.Section>\n\n      <List.Section title=\"Dis Quit Apps\">\n        {disQuitApp.map((app) => {\n          return <AutoQuitAppListItem key={app.path} setRefresh={setRefresh} app={app} apps={quitApp} />;\n        })}\n      </List.Section>\n    </List>\n  );\n}\n", "import React from \"react\";\nimport { Application, List } from \"@raycast/api\";\nimport { ActionOnApp } from \"./action-on-app\";\n\nexport function AutoQuitAppListItem(props: {\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  app: Application;\n  apps: Application[];\n}) {\n  const { setRefresh, app, apps } = props;\n\n  return (\n    <List.Item\n      title={app.name}\n      icon={{ fileIcon: app.path }}\n      quickLook={{ path: app.path, name: app.name }}\n      actions={<ActionOnApp app={app} apps={apps} setRefresh={setRefresh} />}\n    />\n  );\n}\n", "import React from \"react\";\nimport { Action, ActionPanel, Application, Icon } from \"@raycast/api\";\nimport { CacheKey, defaultCache } from \"../utils/constants\";\nimport { ActionOpenPreferences } from \"./action-open-preferences\";\n\nexport function ActionOnApp(props: {\n  app: Application;\n  apps: Application[];\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n}) {\n  const { app, apps, setRefresh } = props;\n  const isExist = apps.some((a) => a.path === app.path);\n\n  return (\n    <ActionPanel>\n      <Action\n        title={isExist ? \"Disable Auto Quit\" : \"Enable Auto Quit\"}\n        icon={isExist ? Icon.XMarkCircle : Icon.Circle}\n        onAction={async () => {\n          const newApps = [...apps];\n          if (isExist) {\n            const _newApps = newApps.filter((a) => a.path !== app.path);\n            defaultCache.set(CacheKey.QUIT_APP, JSON.stringify(_newApps));\n          } else {\n            newApps.push(app);\n            defaultCache.set(CacheKey.QUIT_APP, JSON.stringify(newApps));\n          }\n          setRefresh(Date.now());\n        }}\n      />\n      <ActionOpenPreferences />\n    </ActionPanel>\n  );\n}\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences() {\n  return (\n    <ActionPanel.Section>\n      <Action\n        icon={Icon.Gear}\n        title=\"Configure Command\"\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n        onAction={openCommandPreferences}\n      />\n      <Action\n        icon={Icon.Gear}\n        title=\"Configure Extension\"\n        shortcut={{ modifiers: [\"opt\", \"cmd\"], key: \",\" }}\n        onAction={openExtensionPreferences}\n      />\n    </ActionPanel.Section>\n  );\n}\n", "import { ActionPanel, Grid, List } from \"@raycast/api\";\nimport React from \"react\";\nimport { ActionOpenPreferences } from \"./action-open-preferences\";\nimport { layout } from \"../types/preferences\";\n\nexport function AutoQuitAppEmptyView() {\n  return layout === \"List\" ? (\n    <List.EmptyView\n      icon={{ source: \"empty-view-icon.png\" }}\n      title={\"No App\"}\n      actions={\n        <ActionPanel>\n          <ActionOpenPreferences />\n        </ActionPanel>\n      }\n    />\n  ) : (\n    <Grid.EmptyView\n      icon={{ source: \"empty-view-icon.png\" }}\n      title={\"No App\"}\n      actions={\n        <ActionPanel>\n          <ActionOpenPreferences />\n        </ActionPanel>\n      }\n    />\n  );\n}\n", "import React from \"react\";\nimport { Application, Grid } from \"@raycast/api\";\nimport { AutoQuitAppEmptyView } from \"./auto-quit-app-empty-view\";\nimport { AutoQuitAppGridItem } from \"./auto-quit-app-grid-item\";\nimport { columns, itemInset } from \"../types/preferences\";\nimport { isEmpty } from \"../utils/common-utils\";\n\nexport function AutoQuitAppGridLayout(props: {\n  quitApp: Application[];\n  disQuitApp: Application[];\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  loading: boolean;\n}) {\n  const { quitApp, disQuitApp, setRefresh, loading } = props;\n  return (\n    <Grid\n      columns={parseInt(columns)}\n      inset={isEmpty(itemInset) ? undefined : (itemInset as Grid.Inset)}\n      isLoading={loading}\n      searchBarPlaceholder={\"Search apps\"}\n    >\n      <AutoQuitAppEmptyView />\n\n      <Grid.Section title=\"Quit Apps\">\n        {quitApp.map((app) => {\n          return <AutoQuitAppGridItem key={app.path} setRefresh={setRefresh} app={app} quitApps={quitApp} />;\n        })}\n      </Grid.Section>\n\n      <Grid.Section title=\"Dis Quit Apps\">\n        {disQuitApp.map((app) => {\n          return <AutoQuitAppGridItem key={app.path} setRefresh={setRefresh} app={app} quitApps={quitApp} />;\n        })}\n      </Grid.Section>\n    </Grid>\n  );\n}\n", "import React from \"react\";\nimport { Application, Grid } from \"@raycast/api\";\nimport { ActionOnApp } from \"./action-on-app\";\n\nexport function AutoQuitAppGridItem(props: {\n  setRefresh: React.Dispatch<React.SetStateAction<number>>;\n  app: Application;\n  quitApps: Application[];\n}) {\n  const { setRefresh, app, quitApps } = props;\n\n  return (\n    <Grid.Item\n      title={app.name}\n      content={{ fileIcon: app.path }}\n      quickLook={{ path: app.path, name: app.name }}\n      actions={<ActionOnApp app={app} apps={quitApps} setRefresh={setRefresh} />}\n    />\n  );\n}\n", "export const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n"],
  "mappings": "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",
  "names": ["set_auto_quit_app_exports", "__export", "SetAutoQuitApp", "__toCommonJS", "import_react", "import_api", "import_api", "defaultCache", "import_api", "import_api", "layout", "columns", "itemInset", "refreshInterval", "useAllApps", "refresh", "loading", "setLoading", "quitApps", "setQuitApps", "disQuitApps", "setDisQuitApps", "fetchData", "allApps", "quitAppsString", "defaultCache", "allApp", "quitApp", "import_react", "import_api", "import_api", "import_api", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "import_jsx_runtime", "ActionOnApp", "props", "app", "apps", "setRefresh", "isExist", "a", "newApps", "_newApps", "defaultCache", "ActionOpenPreferences", "import_jsx_runtime", "AutoQuitAppListItem", "props", "setRefresh", "app", "apps", "ActionOnApp", "import_api", "import_jsx_runtime", "AutoQuitAppEmptyView", "layout", "ActionOpenPreferences", "import_jsx_runtime", "AutoQuitAppListLayout", "props", "quitApp", "disQuitApp", "setRefresh", "loading", "AutoQuitAppEmptyView", "app", "AutoQuitAppListItem", "import_api", "import_api", "import_jsx_runtime", "AutoQuitAppGridItem", "props", "setRefresh", "app", "quitApps", "ActionOnApp", "isEmpty", "string", "import_jsx_runtime", "AutoQuitAppGridLayout", "props", "quitApp", "disQuitApp", "setRefresh", "loading", "columns", "isEmpty", "itemInset", "AutoQuitAppEmptyView", "app", "AutoQuitAppGridItem", "import_jsx_runtime", "SetAutoQuitApp", "refresh", "setRefresh", "quitApps", "disQuitApps", "loading", "useAllApps", "layout", "AutoQuitAppListLayout", "AutoQuitAppGridLayout"]
}
