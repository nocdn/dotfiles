{
  "version": 3,
  "sources": ["../src/auto-quit-app-menubar.tsx", "../src/hooks/hooks.ts", "../src/utils/constants.ts", "../node_modules/run-applescript/index.js", "../src/utils/applescript-utils.ts", "../src/types/preferences.ts"],
  "sourcesContent": ["import { Icon, launchCommand, LaunchType, MenuBarExtra, open, openCommandPreferences } from \"@raycast/api\";\nimport { useEnabledQuitApps } from \"./hooks/hooks\";\nimport { scriptQuitApps } from \"./utils/applescript-utils\";\n\nexport default function AutoQuitAppMenubar() {\n  const { quitApps, loading } = useEnabledQuitApps();\n\n  return (\n    <MenuBarExtra\n      icon={{\n        source: {\n          light: \"menu-bar-icon.png\",\n          dark: \"menu-bar-icon@dark.png\",\n        },\n      }}\n      isLoading={loading}\n      tooltip={\"Auto Quit App\"}\n    >\n      {quitApps.length !== 0 && (\n        <MenuBarExtra.Section title={\"Auto Quit Apps\"}>\n          {quitApps?.map((value) => {\n            return (\n              <MenuBarExtra.Item\n                key={value.name}\n                title={value.name}\n                icon={{ fileIcon: value.path }}\n                tooltip={`Open ${value.name}`}\n                onAction={async () => {\n                  await open(value.path);\n                }}\n              />\n            );\n          })}\n        </MenuBarExtra.Section>\n      )}\n      {quitApps.length !== 0 && (\n        <MenuBarExtra.Section>\n          <MenuBarExtra.Item\n            title={\"Quit All Apps\"}\n            icon={Icon.XMarkTopRightSquare}\n            shortcut={{ modifiers: [\"cmd\"], key: \"q\" }}\n            onAction={async () => {\n              await scriptQuitApps(quitApps);\n            }}\n          />\n        </MenuBarExtra.Section>\n      )}\n      <MenuBarExtra.Section>\n        <MenuBarExtra.Item\n          title={\"Set Auto Quit App\"}\n          icon={Icon.AppWindowGrid3x3}\n          shortcut={{ modifiers: [\"cmd\"], key: \"s\" }}\n          onAction={() => {\n            launchCommand({\n              name: \"set-auto-quit-app\",\n              type: LaunchType.UserInitiated,\n            }).then();\n          }}\n        />\n      </MenuBarExtra.Section>\n      <MenuBarExtra.Section>\n        <MenuBarExtra.Item\n          title={\"Preferences\"}\n          icon={Icon.Gear}\n          shortcut={{ modifiers: [\"cmd\"], key: \",\" }}\n          onAction={() => {\n            openCommandPreferences().then(() => null);\n          }}\n        />\n      </MenuBarExtra.Section>\n    </MenuBarExtra>\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { Application, environment, getApplications, LaunchType } from \"@raycast/api\";\nimport { CacheKey, defaultCache } from \"../utils/constants\";\nimport { scriptQuitAppsWithoutWindow } from \"../utils/applescript-utils\";\nimport { refreshInterval } from \"../types/preferences\";\n\nexport const useAllApps = (refresh: number) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [quitApps, setQuitApps] = useState<Application[]>([]);\n  const [disQuitApps, setDisQuitApps] = useState<Application[]>([]);\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    const allApps = await getApplications();\n    const quitAppsString = defaultCache.get(CacheKey.QUIT_APP);\n    let quitApps: Application[] = [];\n    if (typeof quitAppsString == \"string\") {\n      quitApps = JSON.parse(quitAppsString);\n    }\n    const disQuitApps = allApps.filter((allApp) => !quitApps.some((quitApp) => allApp.bundleId == quitApp.bundleId));\n    setQuitApps(quitApps);\n    setDisQuitApps(disQuitApps);\n    setLoading(false);\n  }, [refresh]);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { quitApps: quitApps, disQuitApps: disQuitApps, loading: loading };\n};\n\nexport const useEnabledQuitApps = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [quitApps, setQuitApps] = useState<Application[]>([]);\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    let enabledQuitApps: Application[] = [];\n    try {\n      const quitAppsString = defaultCache.get(CacheKey.QUIT_APP);\n      if (typeof quitAppsString == \"string\") {\n        enabledQuitApps = JSON.parse(quitAppsString);\n      }\n      setQuitApps(enabledQuitApps);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // Quit Apps\n    if (environment.launchType == LaunchType.Background) {\n      const refreshIntervalString = defaultCache.get(CacheKey.REFRESH_INTERVAL);\n      let realRefreshInterval = 5;\n      if (typeof refreshIntervalString == \"string\") {\n        realRefreshInterval = parseInt(refreshIntervalString);\n      }\n      if (realRefreshInterval == refreshInterval) {\n        await scriptQuitAppsWithoutWindow(enabledQuitApps);\n        defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n      } else {\n        const nextRefreshInterval = realRefreshInterval + 5;\n        if (nextRefreshInterval > refreshInterval) {\n          await scriptQuitAppsWithoutWindow(enabledQuitApps);\n          defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n        } else {\n          defaultCache.set(CacheKey.REFRESH_INTERVAL, String(nextRefreshInterval));\n        }\n      }\n    } else {\n      await scriptQuitAppsWithoutWindow(enabledQuitApps);\n      defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { quitApps: quitApps, loading: loading };\n};\n", "import { Cache } from \"@raycast/api\";\n\nexport enum CacheKey {\n  QUIT_APP = \"Quit App\",\n  REFRESH_INTERVAL = \"Refresh Interval\",\n}\n\nexport const defaultCache = new Cache();\n", "import process from 'node:process';\nimport {promisify} from 'node:util';\nimport {execFile, execFileSync} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\n\treturn stdout.trim();\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\n\t\tencoding: 'utf8',\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\n\t\ttimeout: 500,\n\t});\n\n\treturn stdout.trim();\n}\n", "import { runAppleScript } from \"run-applescript\";\nimport { Application, getFrontmostApplication } from \"@raycast/api\";\n\nexport async function scriptQuitAppsWithoutWindow(apps: Application[]) {\n  for (let i = 0; i < apps.length; i++) {\n    try {\n      const appName = apps[i].name;\n      if (\n        (await scriptIsRunning(appName)) &&\n        !(await IsFrontmostApp(appName)) &&\n        !(await scriptGetAppWindow(appName))\n      ) {\n        const script = `\ntell application \"${appName}\"\n   quit\nend tell`;\n        await runAppleScript(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport async function scriptQuitApps(apps: Application[]) {\n  for (let i = 0; i < apps.length; i++) {\n    try {\n      const appName = apps[i].name;\n      const isRunning = await scriptIsRunning(appName);\n      if (isRunning) {\n        const script = `tell application \"${appName}\"\n   quit\nend tell`;\n        await runAppleScript(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nasync function IsFrontmostApp(applicationName: string | undefined) {\n  try {\n    const app = await getFrontmostApplication();\n    return app?.name == applicationName;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nasync function scriptIsRunning(appName: string | undefined) {\n  const script = `if application \"${appName}\" is running then\n\treturn true\nelse\n\treturn false\nend if`;\n  try {\n    const isRunning = await runAppleScript(script);\n    return isRunning == \"true\";\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nasync function scriptGetAppWindow(appName: string | undefined) {\n  const script = `set appName to \"${appName}\"\nif application appName is running then\n  tell application \"System Events\" to tell process appName\n    set windowCount to count of (get every window)\n    return windowCount > 0\n  end tell\n  return false\nend if\n`;\n  try {\n    const hasWindow = await runAppleScript(script);\n    return hasWindow == \"true\";\n  } catch (e) {\n    return false;\n  }\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\nexport interface Preferences {\n  layout: string;\n  columns: string;\n  itemInset: string;\n  refreshInterval: number;\n}\n\nexport const { layout, columns, itemInset, refreshInterval } = getPreferenceValues<Preferences>();\n"],
  "mappings": "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",
  "names": ["auto_quit_app_menubar_exports", "__export", "AutoQuitAppMenubar", "__toCommonJS", "import_api", "import_react", "import_api", "import_api", "defaultCache", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "import_api", "scriptQuitAppsWithoutWindow", "apps", "i", "appName", "scriptIsRunning", "IsFrontmostApp", "scriptGetAppWindow", "script", "runAppleScript", "scriptQuitApps", "applicationName", "e", "import_api", "layout", "columns", "itemInset", "refreshInterval", "useEnabledQuitApps", "loading", "setLoading", "quitApps", "setQuitApps", "fetchData", "enabledQuitApps", "quitAppsString", "defaultCache", "e", "refreshIntervalString", "realRefreshInterval", "refreshInterval", "scriptQuitAppsWithoutWindow", "nextRefreshInterval", "import_jsx_runtime", "AutoQuitAppMenubar", "quitApps", "loading", "useEnabledQuitApps", "value", "scriptQuitApps"]
}
