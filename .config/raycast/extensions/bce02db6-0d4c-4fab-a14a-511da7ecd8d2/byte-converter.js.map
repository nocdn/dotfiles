{
  "version": 3,
  "sources": ["../src/byte-converter.tsx", "../src/hooks/get-input-item.ts", "../src/utils/input-item-utils.ts", "../src/utils/common-utils.ts", "../src/types/preferences.ts", "../src/utils/byte-converter-utils.ts", "../src/components/action-open-preferences.tsx"],
  "sourcesContent": ["import { Action, ActionPanel, Form } from \"@raycast/api\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { getInputItem } from \"./hooks/get-input-item\";\nimport { capitalize, convert, convertToBytes, KeyEquivalentByNumber } from \"./utils/byte-converter-utils\";\nimport { ActionOpenPreferences } from \"./components/action-open-preferences\";\n\nexport default function ByteConverter() {\n  const units = [\"bits\", \"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"] as const;\n  type Unit = (typeof units)[number];\n  type State = {\n    [unit in Unit]: number;\n  };\n  type SetFunction = (value: string) => void;\n  type SetFunctions<T> = {\n    [P in keyof T as `set${Capitalize<string & P>}`]: SetFunction;\n  };\n\n  const [state, setState] = useState<State & SetFunctions<State>>(\n    units.reduce(\n      (acc, unit) => {\n        const capitalizedUnit = capitalize(unit);\n        const setFunctionName = `set${capitalizedUnit}`;\n        return {\n          ...acc,\n          [unit]: 0,\n          [setFunctionName]: (newValue: string) => {\n            let value = newValue || \"0\"; // Empty string\n            value = value.replace(/[^\\d.]/g, \"\"); // Should only contains numbers\n            const parsedValue = parseFloat(value);\n            if (isNaN(parsedValue)) {\n              return;\n            }\n            const index = units.indexOf(unit);\n            const bytesValue = convertToBytes(parsedValue, index);\n\n            setState((prevState) => {\n              const newState = { ...prevState };\n              for (let i = 0; i < index; i++) {\n                newState[units[i]] = convert(bytesValue, i);\n              }\n              newState[unit] = parsedValue;\n              for (let i = index + 1; i < units.length; i++) {\n                newState[units[i]] = convert(bytesValue, i);\n              }\n              return newState;\n            });\n          },\n        };\n      },\n      {} as State & SetFunctions<State>,\n    ),\n  );\n\n  const textFields = useRef<(Form.TextField | null)[]>(Array.from({ length: units.length }));\n\n  const [focusedTextFieldIndex, setFocusedTextFieldIndex] = useState<number>(0);\n\n  const inputItem = getInputItem();\n  useEffect(() => {\n    async function _fetch() {\n      state[\"setBytes\"](inputItem);\n    }\n\n    _fetch().then();\n  }, [inputItem]);\n\n  const getBestUnitExpression = () => {\n    const values = units.map((unit) => state[unit]);\n    const maxValue = 1000;\n    let bestIndex = 0;\n    for (; bestIndex < units.length - 1; bestIndex++) {\n      const value = values[bestIndex];\n      if (value < maxValue) {\n        break;\n      }\n    }\n    return getExpressionAtIndex(bestIndex);\n  };\n\n  const getFocusedValueExpression = () => {\n    return getExpressionAtIndex(focusedTextFieldIndex);\n  };\n\n  const getExpressionAtIndex = (index: number): string => {\n    const unit = units[index];\n    const value = state[unit];\n    const expression = `${value} ${unit}`;\n    return expression;\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.CopyToClipboard\n            title={`Copy ${getBestUnitExpression()}`}\n            content={getBestUnitExpression()}\n            shortcut={{ modifiers: [], key: \"enter\" }}\n          />\n          <Action.CopyToClipboard title={`Copy ${getFocusedValueExpression()}`} content={getFocusedValueExpression()} />\n          <ActionPanel.Section>\n            {units.map((_, index) => {\n              const keyEquivalent = KeyEquivalentByNumber(index + 1);\n              return (\n                <Action.CopyToClipboard\n                  key={index} // to make key unique to avoid warning\n                  title={`Copy ${getExpressionAtIndex(index)}`}\n                  content={getExpressionAtIndex(index)}\n                  shortcut={keyEquivalent ? { modifiers: [\"cmd\"], key: keyEquivalent } : undefined}\n                />\n              );\n            })}\n          </ActionPanel.Section>\n          <ActionOpenPreferences showCommandPreferences={false} showExtensionPreferences={true} />\n        </ActionPanel>\n      }\n    >\n      {units.map((unit, index) => (\n        <Form.TextField\n          key={unit}\n          id={unit}\n          title={unit}\n          value={state[unit].toString()}\n          ref={(el) => (textFields.current[index] = el)}\n          autoFocus={index == 1}\n          placeholder=\"0\"\n          onFocus={() => {\n            setFocusedTextFieldIndex(index);\n          }}\n          onChange={(newValue) => {\n            const setFunction = state[`set${capitalize(unit)}` as keyof typeof state];\n            if (typeof setFunction === \"function\") {\n              setFunction(newValue);\n            }\n          }}\n        />\n      ))}\n    </Form>\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { fetchItemInputClipboardFirst, fetchItemInputSelectedFirst } from \"../utils/input-item-utils\";\nimport { autoDetect, priorityDetection } from \"../types/preferences\";\n\nexport const getInputItem = () => {\n  const [inputItem, setInputItem] = useState<string>(\"\");\n\n  const fetchData = useCallback(async () => {\n    if (!autoDetect) {\n      return;\n    }\n    if (priorityDetection === \"selected\") {\n      setInputItem(await fetchItemInputSelectedFirst());\n    } else {\n      setInputItem(await fetchItemInputClipboardFirst());\n    }\n  }, []);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return inputItem.trim();\n};\n", "import { Clipboard, getSelectedText } from \"@raycast/api\";\nimport { isEmpty } from \"./common-utils\";\n\nexport const fetchItemInputSelectedFirst = async () => {\n  return getSelectedText()\n    .then(async (text) => (!isEmpty(text) ? text : await getClipboardText()))\n    .catch(async () => await getClipboardText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nexport const fetchItemInputClipboardFirst = async () => {\n  return getClipboardText()\n    .then(async (text) => (!isEmpty(text) ? text : await getSelectedText()))\n    .catch(async () => await getSelectedText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nconst getClipboardText = async () => {\n  const content = await Clipboard.readText();\n  return content ? content : \"\";\n};\n", "export const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  autoDetect: boolean;\n  priorityDetection: string;\n  advanceView: boolean;\n  advanceViewLocation: string;\n}\nexport const { autoDetect, priorityDetection, advanceView, advanceViewLocation } = getPreferenceValues<Preferences>();\n", "import { Keyboard } from \"@raycast/api\";\n\nexport const convertToBytes = (value: number, unitIndex: number): number => {\n  let bytesValue = value;\n  if (unitIndex === 0) {\n    bytesValue /= 8; // Convert bits to bytes\n    return bytesValue;\n  }\n  for (let i = unitIndex; i > 1; i--) {\n    bytesValue *= 1024;\n  }\n  for (let i = unitIndex; i < 1; i++) {\n    bytesValue /= 1024;\n  }\n  return bytesValue;\n};\n\nexport const convert = (bytesValue: number, toUnitIndex: number): number => {\n  let value = bytesValue;\n  if (toUnitIndex === 0) {\n    value *= 8; // Convert bytes to bits\n    return value;\n  }\n  for (let i = 1; i < toUnitIndex; i++) {\n    value /= 1024;\n  }\n  for (let i = 1; i > toUnitIndex; i--) {\n    value *= 1024;\n  }\n  value = parseFloat(value.toFixed(2)); // Keep two digits at most\n  return value;\n};\n\nexport const KeyEquivalentByNumber = (number: number): Keyboard.KeyEquivalent | undefined => {\n  const keyEquivalents: Record<number, Keyboard.KeyEquivalent> = {\n    0: \"0\",\n    1: \"1\",\n    2: \"2\",\n    3: \"3\",\n    4: \"4\",\n    5: \"5\",\n    6: \"6\",\n    7: \"7\",\n    8: \"8\",\n    9: \"9\",\n  };\n  return keyEquivalents[number];\n};\n\nexport const capitalize = (s: string) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences(props: { showCommandPreferences: boolean; showExtensionPreferences: boolean }) {\n  const { showCommandPreferences, showExtensionPreferences } = props;\n  return (\n    <ActionPanel.Section>\n      {showCommandPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Command\"\n          shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n          onAction={openCommandPreferences}\n        />\n      )}\n      {showExtensionPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Extension\"\n          shortcut={{ modifiers: [\"opt\", \"cmd\"], key: \",\" }}\n          onAction={openExtensionPreferences}\n        />\n      )}\n    </ActionPanel.Section>\n  );\n}\n"],
  "mappings": "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",
  "names": ["byte_converter_exports", "__export", "ByteConverter", "__toCommonJS", "import_api", "import_react", "import_react", "import_api", "isEmpty", "string", "fetchItemInputSelectedFirst", "text", "isEmpty", "getClipboardText", "item", "fetchItemInputClipboardFirst", "content", "import_api", "autoDetect", "priorityDetection", "advanceView", "advanceViewLocation", "getInputItem", "inputItem", "setInputItem", "fetchData", "autoDetect", "priorityDetection", "fetchItemInputSelectedFirst", "fetchItemInputClipboardFirst", "convertToBytes", "value", "unitIndex", "bytesValue", "i", "convert", "toUnitIndex", "KeyEquivalentByNumber", "number", "capitalize", "s", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "props", "showCommandPreferences", "showExtensionPreferences", "import_jsx_runtime", "ByteConverter", "units", "state", "setState", "acc", "unit", "setFunctionName", "capitalize", "newValue", "value", "parsedValue", "index", "bytesValue", "convertToBytes", "prevState", "newState", "i", "convert", "textFields", "focusedTextFieldIndex", "setFocusedTextFieldIndex", "inputItem", "getInputItem", "_fetch", "getBestUnitExpression", "values", "maxValue", "bestIndex", "getExpressionAtIndex", "getFocusedValueExpression", "_", "keyEquivalent", "KeyEquivalentByNumber", "ActionOpenPreferences", "el", "setFunction"]
}
