{
  "version": 3,
  "sources": ["../src/byte-converter.tsx", "../src/components/action-open-preferences.tsx", "../src/hooks/use-byte-converter.ts", "../src/utils/common-utils.ts", "../src/utils/byte-converter-utils.ts", "../src/types/preferences.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Form, Keyboard } from \"@raycast/api\";\nimport { ActionOpenPreferences } from \"./components/action-open-preferences\";\nimport useByteConverter from \"./hooks/use-byte-converter\";\nimport { useState } from \"react\";\n\nconst unitToExponent = {\n  bits: 0, // 2^0 bit\n  Bytes: 3, // 2^3 bits\n  KB: 13, // 2^10 B = 2^13 b\n  MB: 23, // 2^20 B = 2^23 b\n  GB: 33, // 2^30 B = 2^33 b\n  TB: 43, // 2^40 B = 2^43 b\n  PB: 53, // 2^50 B = 2^53 b\n  EB: 63, // 2^60 B = 2^63 b\n};\n\nexport default function ByteConverter() {\n  const converter = useByteConverter(unitToExponent);\n\n  const [focusedUnit, setFocusedUnit] = useState<keyof typeof unitToExponent>(\"bits\");\n  const focusedValue = `${converter.get(unitToExponent[focusedUnit])} ${focusedUnit}`;\n\n  const bestUnit = converter.getBestUnitExpression();\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          {bestUnit !== null && (\n            <Action.CopyToClipboard\n              title={`Copy ${bestUnit}`}\n              content={bestUnit}\n              // shortcut={{ modifiers: [\"cmd\"], key: \"enter\" }}\n            />\n          )}\n          <Action.CopyToClipboard\n            title={`Copy ${focusedValue}`}\n            content={focusedValue}\n            shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"enter\" }}\n          />\n          <ActionPanel.Section>\n            {Object.entries(unitToExponent).map(([unit, exponent], index) => (\n              <Action.CopyToClipboard\n                key={unit}\n                title={`Copy ${converter.get(exponent)} ${unit}`}\n                content={`${converter.get(exponent)} ${unit}`}\n                shortcut={{ modifiers: [\"cmd\"], key: `${index + 1}` as Keyboard.KeyEquivalent }}\n              />\n            ))}\n          </ActionPanel.Section>\n          <ActionOpenPreferences showCommandPreferences={false} showExtensionPreferences={true} />\n        </ActionPanel>\n      }\n    >\n      {Object.entries(unitToExponent).map(([unit, exponent]) => (\n        <Form.TextField\n          key={unit}\n          id={unit}\n          title={unit}\n          value={converter.get(exponent)}\n          ref={(r) => (converter.ref.current[unit as keyof typeof unitToExponent] = r!)}\n          placeholder=\"0\"\n          onChange={(v) => converter.set(exponent, v)}\n          onFocus={() => setFocusedUnit(unit as keyof typeof unitToExponent)}\n        />\n      ))}\n    </Form>\n  );\n}\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences(props: { showCommandPreferences: boolean; showExtensionPreferences: boolean }) {\n  const { showCommandPreferences, showExtensionPreferences } = props;\n  return (\n    <ActionPanel.Section>\n      {showCommandPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Command\"\n          shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n          onAction={openCommandPreferences}\n        />\n      )}\n      {showExtensionPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Extension\"\n          shortcut={{ modifiers: [\"opt\", \"cmd\"], key: \",\" }}\n          onAction={openExtensionPreferences}\n        />\n      )}\n    </ActionPanel.Section>\n  );\n}\n", "import { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { insertDot, parseBigFloat } from \"../utils/byte-converter-utils\";\nimport { autoPaste } from \"../types/preferences\";\nimport { Clipboard, Form } from \"@raycast/api\";\n\nexport type ByteConverter<Units extends string> = {\n  get: (exponent: number) => string;\n  set: (exponent: number, value: string) => void;\n  reset: () => void;\n  getBestUnitExpression: () => string | null;\n  ref: MutableRefObject<Record<Units, Form.TextField>>;\n};\n\ntype Override = { exponent: number; value: string };\n\nexport default function useByteConverter<Units extends string>(\n  unitToExponent: Record<Units, number>,\n): ByteConverter<Units> {\n  const [value, setValue] = useState<null | bigint>(null);\n  const [override, setOverride] = useState<null | Override>(null);\n\n  const precision = BigInt(100);\n\n  const ref = useRef({} as Record<Units, Form.TextField>); // remember to assign ref 36\n\n  useEffect(() => {\n    if (autoPaste) {\n      Clipboard.readText().then((text) => {\n        if (!text) return;\n        text = text.trim();\n        for (const [unit, exponent] of Object.entries(unitToExponent)) {\n          if (text.endsWith(unit)) {\n            const value = text.substring(0, text.length - unit.length).trimEnd();\n            set(exponent as number, value);\n            ref.current[unit as Units]?.focus();\n          }\n        }\n      });\n    }\n  }, []);\n\n  const getBestUnitExpression = () => {\n    const maxValue = BigInt(1000);\n    if (value === null) return null;\n\n    let best: [bigint, string | null] = [BigInt(0), null];\n    // closest is used in case of no unit matched maxValue requirement\n    let closest: [bigint | null, string | null] = [null, null];\n\n    for (const [unit, exponent] of Object.entries(unitToExponent)) {\n      const multiplier = BigInt(1) << BigInt(exponent as number);\n      const v = (precision * value) / multiplier;\n      if (v < precision * maxValue && v > best[0]) {\n        best = [v, unit];\n      } else if (closest[0] === null || v < closest[0]) {\n        closest = [v, unit];\n      }\n    }\n    if (best[1] !== null) return `${insertDot(best[0])} ${best[1]}`;\n    if (closest[0] !== null) return `${insertDot(closest[0])} ${closest[1]}`;\n    throw new Error(\"Invalid unitToExponent\");\n  };\n\n  const get = (exponent: number): string => {\n    if (override !== null && override.exponent == exponent) {\n      return override.value;\n    }\n    if (value === null) return \"\";\n    const multiplier = BigInt(1) << BigInt(exponent);\n    return insertDot((precision * value) / multiplier);\n  };\n\n  const set = (exponent: number, value: string) => {\n    setOverride({ exponent, value });\n    value = value.trim();\n    const [parsed, quotient] = parseBigFloat(value);\n    if (parsed === null) setValue(null);\n    else {\n      const multiplier = BigInt(1) << BigInt(exponent);\n      setValue((parsed * multiplier) / quotient);\n    }\n  };\n\n  const reset = () => {\n    setValue(null);\n    setOverride(null);\n  };\n\n  return { get, set, reset, getBestUnitExpression, ref };\n}\n", "export const parseBigInt = (string: string, radix: number): bigint | null => {\n  if (string.length == 0) {\n    return null;\n  }\n  let value = BigInt(0);\n  for (const char of string) {\n    const digit = parseInt(char, radix);\n    if (isNaN(digit)) {\n      return null;\n    }\n    value = value * BigInt(radix) + BigInt(digit);\n  }\n  return value;\n};\n", "import { Keyboard } from \"@raycast/api\";\nimport { parseBigInt } from \"./common-utils\";\n\nexport const convertToBytes = (value: number, unitIndex: number): number => {\n  let bytesValue = value;\n  if (unitIndex === 0) {\n    bytesValue /= 8; // Convert bits to bytes\n    return bytesValue;\n  }\n  for (let i = unitIndex; i > 1; i--) {\n    bytesValue *= 1024;\n  }\n  for (let i = unitIndex; i < 1; i++) {\n    bytesValue /= 1024;\n  }\n  return bytesValue;\n};\n\nexport const convert = (bytesValue: number, toUnitIndex: number): number => {\n  let value = bytesValue;\n  if (toUnitIndex === 0) {\n    value *= 8; // Convert bytes to bits\n    return value;\n  }\n  for (let i = 1; i < toUnitIndex; i++) {\n    value /= 1024;\n  }\n  for (let i = 1; i > toUnitIndex; i--) {\n    value *= 1024;\n  }\n  value = parseFloat(value.toFixed(2)); // Keep two digits at most\n  return value;\n};\n\nexport const KeyEquivalentByNumber = (number: number): Keyboard.KeyEquivalent | undefined => {\n  const keyEquivalents: Record<number, Keyboard.KeyEquivalent> = {\n    0: \"0\",\n    1: \"1\",\n    2: \"2\",\n    3: \"3\",\n    4: \"4\",\n    5: \"5\",\n    6: \"6\",\n    7: \"7\",\n    8: \"8\",\n    9: \"9\",\n  };\n  return keyEquivalents[number];\n};\n\nexport const capitalize = (s: string) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const insertDot = (n: bigint) => {\n  let v = n.toString();\n  while (v.length < 3) v = \"0\" + v;\n  const p = v.length - 2;\n  v = v.substring(0, p) + \".\" + v.substring(p);\n  while (v.at(-1) == \"0\") v = v.substring(0, v.length - 1);\n  if (v.at(-1) == \".\") v = v.substring(0, v.length - 1);\n  return v;\n};\n\nexport const parseBigFloat = (n: string) => {\n  const dot = n.indexOf(\".\");\n  if (dot == -1) return [parseBigInt(n, 10), BigInt(1)] as const;\n  const exp = n.length - dot - 1;\n  const m = n.substring(0, dot) + n.substring(dot + 1);\n  let quotient = BigInt(1);\n  for (let i = 0; i < exp; i++) quotient *= BigInt(10);\n  return [parseBigInt(m, 10), quotient] as const;\n};\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  autoPaste: boolean;\n  asciiCommaSeparated: boolean;\n  advanceView: boolean;\n  advanceViewLocation: string;\n}\nexport const { autoPaste, asciiCommaSeparated, advanceView, advanceViewLocation } = getPreferenceValues<Preferences>();\n"],
  "mappings": "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",
  "names": ["byte_converter_exports", "__export", "ByteConverter", "__toCommonJS", "import_api", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "props", "showCommandPreferences", "showExtensionPreferences", "import_react", "parseBigInt", "string", "radix", "value", "char", "digit", "insertDot", "n", "v", "p", "parseBigFloat", "dot", "parseBigInt", "exp", "m", "quotient", "i", "import_api", "autoPaste", "asciiCommaSeparated", "advanceView", "advanceViewLocation", "import_api", "useByteConverter", "unitToExponent", "value", "setValue", "override", "setOverride", "precision", "ref", "autoPaste", "text", "unit", "exponent", "set", "getBestUnitExpression", "maxValue", "best", "closest", "multiplier", "v", "insertDot", "get", "parsed", "quotient", "parseBigFloat", "import_react", "import_jsx_runtime", "unitToExponent", "ByteConverter", "converter", "useByteConverter", "focusedUnit", "setFocusedUnit", "focusedValue", "bestUnit", "unit", "exponent", "index", "ActionOpenPreferences", "r", "v"]
}
