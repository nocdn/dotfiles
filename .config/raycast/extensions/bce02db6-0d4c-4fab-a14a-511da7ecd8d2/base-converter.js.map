{
  "version": 3,
  "sources": ["../src/base-converter.tsx", "../src/utils/common-utils.ts", "../src/utils/base-converter-utils.ts", "../src/components/base-converters-advance-view.tsx", "../src/components/base-converters-simple-view.tsx", "../src/hooks/get-input-item.ts", "../src/utils/input-item-utils.ts", "../src/types/preferences.ts", "../src/components/action-open-preferences.tsx"],
  "sourcesContent": ["import { Action, ActionPanel, Form, Icon } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { isEmpty } from \"./utils/common-utils\";\nimport { baseToBaseBigInt, buildBases, safeBigIntConverter } from \"./utils/base-converter-utils\";\nimport { BaseConvertersAdvanceView } from \"./components/base-converters-advance-view\";\nimport { BaseConvertersSimpleView } from \"./components/base-converters-simple-view\";\nimport { getInputItem } from \"./hooks/get-input-item\";\nimport { ActionOpenPreferences } from \"./components/action-open-preferences\";\nimport { advanceView, advanceViewLocation } from \"./types/preferences\";\n\nexport default function BaseConverter() {\n  const [base10, setBase10] = useState<string>(\"\");\n  const [base2, setBase2] = useState<string>(\"\");\n  const [base4, setBase4] = useState<string>(\"\");\n  const [base8, setBase8] = useState<string>(\"\");\n  const [base16, setBase16] = useState<string>(\"\");\n  const [base32, setBase32] = useState<string>(\"\");\n  const [baseString, setBaseString] = useState<string>(\"\");\n  const [baseRadix, setBaseRadix] = useState<number>(10);\n\n  const [input, setInput] = useState<string>(\"\");\n  const [output, setOutput] = useState<string>(\"\");\n  const [fromBase, setFromBase] = useState<string>(\"10\");\n  const [toBase, setToBase] = useState<string>(\"2\");\n  const bases = buildBases();\n\n  const inputItem = getInputItem();\n  useEffect(() => {\n    async function _fetch() {\n      setBaseString(inputItem);\n      setBaseRadix(10);\n    }\n\n    _fetch().then();\n  }, [inputItem]);\n\n  useEffect(() => {\n    async function _fetch() {\n      if (isEmpty(baseString.trim())) {\n        setBase10(\"\");\n        setBase2(\"\");\n        setBase4(\"\");\n        setBase8(\"\");\n        setBase16(\"\");\n        setBase32(\"\");\n        setInput(\"\");\n      } else {\n        const baseNumber = baseToBaseBigInt(baseString, baseRadix.toString(), \"10\");\n        const baseStr = safeBigIntConverter(baseNumber);\n        setBase10(baseNumber);\n        setBase2(baseStr.toString(2));\n        setBase4(baseStr.toString(4));\n        setBase8(baseStr.toString(8));\n        setBase16(baseStr.toString(16));\n        setBase32(baseStr.toString(32));\n        setInput(baseStr.toString(baseRadix));\n      }\n    }\n\n    _fetch().then();\n  }, [baseString]);\n\n  useEffect(() => {\n    async function _fetch() {\n      setOutput(baseToBaseBigInt(input, fromBase, toBase));\n      setBaseString(input);\n      setBaseRadix(parseInt(fromBase));\n    }\n\n    _fetch().then();\n  }, [input, fromBase, toBase]);\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.CopyToClipboard title={\"Copy Base 10\"} content={base10} shortcut={{ modifiers: [\"cmd\"], key: \"1\" }} />\n          <ActionPanel.Section>\n            <Action.CopyToClipboard title={\"Copy Base 2\"} content={base2} shortcut={{ modifiers: [\"cmd\"], key: \"2\" }} />\n            <Action.CopyToClipboard title={\"Copy Base 4\"} content={base4} shortcut={{ modifiers: [\"cmd\"], key: \"3\" }} />\n            <Action.CopyToClipboard title={\"Copy Base 8\"} content={base8} shortcut={{ modifiers: [\"cmd\"], key: \"4\" }} />\n            <Action.CopyToClipboard\n              title={\"Copy Base 16\"}\n              content={base16}\n              shortcut={{ modifiers: [\"cmd\"], key: \"5\" }}\n            />\n            <Action.CopyToClipboard\n              title={\"Copy Base 32\"}\n              content={base32}\n              shortcut={{ modifiers: [\"cmd\"], key: \"6\" }}\n            />\n            {advanceView && (\n              <Action.CopyToClipboard\n                title={\"Copy Output\"}\n                content={output}\n                shortcut={{ modifiers: [\"cmd\"], key: \"o\" }}\n              />\n            )}\n          </ActionPanel.Section>\n          <ActionPanel.Section>\n            <Action\n              icon={Icon.Trash}\n              title={\"Clear All\"}\n              shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"backspace\" }}\n              onAction={() => {\n                setBaseString(\"\");\n                setBaseRadix(10);\n              }}\n            />\n          </ActionPanel.Section>\n          <ActionOpenPreferences showCommandPreferences={true} showExtensionPreferences={true} />\n        </ActionPanel>\n      }\n    >\n      {advanceView && advanceViewLocation === \"Top\" && (\n        <>\n          <BaseConvertersAdvanceView\n            bases={bases}\n            output={output}\n            inputUseState={[input, setInput]}\n            fromBaseUseState={[fromBase, setFromBase]}\n            toBaseUseState={[toBase, setToBase]}\n          />\n          <Form.Separator />\n        </>\n      )}\n      <BaseConvertersSimpleView\n        base10={base10}\n        base2={base2}\n        base4={base4}\n        base8={base8}\n        base16={base16}\n        base32={base32}\n        setBaseString={setBaseString}\n        setBaseRadix={setBaseRadix}\n      />\n      {advanceView && advanceViewLocation === \"Bottom\" && (\n        <>\n          <Form.Separator />\n          <BaseConvertersAdvanceView\n            bases={bases}\n            output={output}\n            inputUseState={[input, setInput]}\n            fromBaseUseState={[fromBase, setFromBase]}\n            toBaseUseState={[toBase, setToBase]}\n          />\n        </>\n      )}\n    </Form>\n  );\n}\n", "export const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n", "export const buildBases = () => {\n  const bases: { title: string; value: string }[] = [];\n  for (let i = 2; i <= 36; i++) {\n    bases.push({ title: i + \"\", value: i + \"\" });\n  }\n  return bases;\n};\n\nexport const baseToBaseBigInt = (input: string, fromBase: string, toBase: string): string => {\n  const fromBaseNum = parseInt(fromBase);\n  const toBaseNum = parseInt(toBase);\n  if (\n    isNaN(fromBaseNum) ||\n    fromBaseNum < 2 ||\n    fromBaseNum > 36 ||\n    isNaN(toBaseNum) ||\n    toBaseNum < 2 ||\n    toBaseNum > 36\n  ) {\n    return \"\";\n  }\n\n  try {\n    let bigIntValue = BigInt(\"0\");\n    for (const char of input.trim()) {\n      bigIntValue = bigIntValue * BigInt(fromBaseNum) + BigInt(parseInt(char, fromBaseNum));\n      if (isNaN(Number(bigIntValue))) {\n        throw new Error(\"Invalid input number\");\n      }\n    }\n\n    return bigIntValue.toString(toBaseNum);\n  } catch (error) {\n    return \"\";\n  }\n};\n\nexport function safeBigIntConverter(baseString: string) {\n  try {\n    return BigInt(baseString);\n  } catch (error) {\n    return BigInt(0);\n  }\n}\n", "import { Form } from \"@raycast/api\";\nimport { isEmpty } from \"../utils/common-utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\nexport function BaseConvertersAdvanceView(props: {\n  bases: { title: string; value: string }[];\n  output: string;\n  inputUseState: [string, Dispatch<SetStateAction<string>>];\n  fromBaseUseState: [string, Dispatch<SetStateAction<string>>];\n  toBaseUseState: [string, Dispatch<SetStateAction<string>>];\n}) {\n  const { bases, output } = props;\n  const [input, setInput] = props.inputUseState;\n  const [fromBase, setFromBase] = props.fromBaseUseState;\n  const [toBase, setToBase] = props.toBaseUseState;\n  return (\n    <>\n      <Form.Dropdown id={\"fromBase\"} title={\"From Base\"} value={fromBase} onChange={setFromBase}>\n        {bases.map((value) => {\n          return <Form.Dropdown.Item key={\"fromBase\" + value.value} value={value.value} title={value.title} />;\n        })}\n      </Form.Dropdown>\n      <Form.Dropdown id={\"toBase\"} title={\"To Base\"} value={toBase} onChange={setToBase}>\n        {bases.map((value) => {\n          return <Form.Dropdown.Item key={\"toBase\" + value.value} value={value.value} title={value.title} />;\n        })}\n      </Form.Dropdown>\n      <Form.TextField\n        id={\"input\"}\n        title=\"Input\"\n        value={input}\n        onChange={(newValue) => {\n          if (isEmpty(newValue)) return;\n          setInput(newValue.trim());\n        }}\n      />\n      <Form.Description title=\"Output\" text={output + \"\\n\"} />\n    </>\n  );\n}\n", "import { Form } from \"@raycast/api\";\nimport { Dispatch, SetStateAction } from \"react\";\n\nexport function BaseConvertersSimpleView(props: {\n  base10: string;\n  base2: string;\n  base4: string;\n  base8: string;\n  base16: string;\n  base32: string;\n  setBaseString: Dispatch<SetStateAction<string>>;\n  setBaseRadix: Dispatch<SetStateAction<number>>;\n}) {\n  const { base10, base2, base4, base8, base16, base32, setBaseString, setBaseRadix } = props;\n  return (\n    <>\n      <Form.TextField\n        id={\"base10\"}\n        title=\"10\"\n        value={base10}\n        onChange={(newValue) => {\n          setBaseString(newValue);\n          setBaseRadix(10);\n        }}\n      />\n      <Form.TextField\n        id={\"base2\"}\n        title=\"2\"\n        value={base2}\n        onChange={(newValue) => {\n          setBaseString(newValue);\n          setBaseRadix(2);\n        }}\n      />\n      <Form.TextField\n        id={\"base4\"}\n        title=\"4\"\n        value={base4}\n        onChange={(newValue) => {\n          setBaseString(newValue);\n          setBaseRadix(4);\n        }}\n      />\n      <Form.TextField\n        id={\"base8\"}\n        title=\"8\"\n        value={base8}\n        onChange={(newValue) => {\n          setBaseString(newValue);\n          setBaseRadix(8);\n        }}\n      />\n      <Form.TextField\n        id={\"base16\"}\n        title=\"16\"\n        value={base16}\n        onChange={(newValue) => {\n          setBaseString(newValue);\n          setBaseRadix(16);\n        }}\n      />\n      <Form.TextField\n        id={\"base32\"}\n        title=\"32\"\n        value={base32}\n        onChange={(newValue) => {\n          setBaseString(newValue);\n          setBaseRadix(32);\n        }}\n      />\n    </>\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { fetchItemInputClipboardFirst, fetchItemInputSelectedFirst } from \"../utils/input-item-utils\";\nimport { autoDetect, priorityDetection } from \"../types/preferences\";\n\nexport const getInputItem = () => {\n  const [inputItem, setInputItem] = useState<string>(\"\");\n\n  const fetchData = useCallback(async () => {\n    if (!autoDetect) {\n      return;\n    }\n    if (priorityDetection === \"selected\") {\n      setInputItem(await fetchItemInputSelectedFirst());\n    } else {\n      setInputItem(await fetchItemInputClipboardFirst());\n    }\n  }, []);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return inputItem.trim();\n};\n", "import { Clipboard, getSelectedText } from \"@raycast/api\";\nimport { isEmpty } from \"./common-utils\";\n\nexport const fetchItemInputSelectedFirst = async () => {\n  return getSelectedText()\n    .then(async (text) => (!isEmpty(text) ? text : await getClipboardText()))\n    .catch(async () => await getClipboardText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nexport const fetchItemInputClipboardFirst = async () => {\n  return getClipboardText()\n    .then(async (text) => (!isEmpty(text) ? text : await getSelectedText()))\n    .catch(async () => await getSelectedText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nconst getClipboardText = async () => {\n  const content = await Clipboard.readText();\n  return content ? content : \"\";\n};\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  autoDetect: boolean;\n  priorityDetection: string;\n  advanceView: boolean;\n  advanceViewLocation: string;\n}\nexport const { autoDetect, priorityDetection, advanceView, advanceViewLocation } = getPreferenceValues<Preferences>();\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences(props: { showCommandPreferences: boolean; showExtensionPreferences: boolean }) {\n  const { showCommandPreferences, showExtensionPreferences } = props;\n  return (\n    <ActionPanel.Section>\n      {showCommandPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Command\"\n          shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n          onAction={openCommandPreferences}\n        />\n      )}\n      {showExtensionPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Extension\"\n          shortcut={{ modifiers: [\"opt\", \"cmd\"], key: \",\" }}\n          onAction={openExtensionPreferences}\n        />\n      )}\n    </ActionPanel.Section>\n  );\n}\n"],
  "mappings": "mbAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,aAAAE,KAAA,eAAAC,GAAAH,IAAA,IAAAI,EAAgD,wBAChDC,EAAoC,iBCD7B,IAAMC,EAAWC,GACf,EAAEA,GAAU,MAAQ,OAAOA,CAAM,EAAE,OAAS,GCD9C,IAAMC,EAAa,IAAM,CAC9B,IAAMC,EAA4C,CAAC,EACnD,QAASC,EAAI,EAAGA,GAAK,GAAIA,IACvBD,EAAM,KAAK,CAAE,MAAOC,EAAI,GAAI,MAAOA,EAAI,EAAG,CAAC,EAE7C,OAAOD,CACT,EAEaE,EAAmB,CAACC,EAAeC,EAAkBC,IAA2B,CAC3F,IAAMC,EAAc,SAASF,CAAQ,EAC/BG,EAAY,SAASF,CAAM,EACjC,GACE,MAAMC,CAAW,GACjBA,EAAc,GACdA,EAAc,IACd,MAAMC,CAAS,GACfA,EAAY,GACZA,EAAY,GAEZ,MAAO,GAGT,GAAI,CACF,IAAIC,EAAc,OAAO,GAAG,EAC5B,QAAWC,KAAQN,EAAM,KAAK,EAE5B,GADAK,EAAcA,EAAc,OAAOF,CAAW,EAAI,OAAO,SAASG,EAAMH,CAAW,CAAC,EAChF,MAAM,OAAOE,CAAW,CAAC,EAC3B,MAAM,IAAI,MAAM,sBAAsB,EAI1C,OAAOA,EAAY,SAASD,CAAS,CACvC,MAAgB,CACd,MAAO,EACT,CACF,EAEO,SAASG,EAAoBC,EAAoB,CACtD,GAAI,CACF,OAAO,OAAOA,CAAU,CAC1B,MAAgB,CACd,OAAO,OAAO,CAAC,CACjB,CACF,CC3CA,IAAAC,EAAqB,wBAgBjB,IAAAC,EAAA,6BAZG,SAASC,EAA0BC,EAMvC,CACD,GAAM,CAAE,MAAAC,EAAO,OAAAC,CAAO,EAAIF,EACpB,CAACG,EAAOC,CAAQ,EAAIJ,EAAM,cAC1B,CAACK,EAAUC,CAAW,EAAIN,EAAM,iBAChC,CAACO,EAAQC,CAAS,EAAIR,EAAM,eAClC,SACE,oBACE,oBAAC,OAAK,SAAL,CAAc,GAAI,WAAY,MAAO,YAAa,MAAOK,EAAU,SAAUC,EAC3E,SAAAL,EAAM,IAAKQ,MACH,OAAC,OAAK,SAAS,KAAd,CAAkD,MAAOA,EAAM,MAAO,MAAOA,EAAM,OAA3D,WAAaA,EAAM,KAA+C,CACnG,EACH,KACA,OAAC,OAAK,SAAL,CAAc,GAAI,SAAU,MAAO,UAAW,MAAOF,EAAQ,SAAUC,EACrE,SAAAP,EAAM,IAAKQ,MACH,OAAC,OAAK,SAAS,KAAd,CAAgD,MAAOA,EAAM,MAAO,MAAOA,EAAM,OAAzD,SAAWA,EAAM,KAA+C,CACjG,EACH,KACA,OAAC,OAAK,UAAL,CACC,GAAI,QACJ,MAAM,QACN,MAAON,EACP,SAAWO,GAAa,CAClBC,EAAQD,CAAQ,GACpBN,EAASM,EAAS,KAAK,CAAC,CAC1B,EACF,KACA,OAAC,OAAK,YAAL,CAAiB,MAAM,SAAS,KAAMR,EAAS;AAAA,EAAM,GACxD,CAEJ,CCvCA,IAAAU,EAAqB,wBAejBC,EAAA,6BAZG,SAASC,EAAyBC,EAStC,CACD,GAAM,CAAE,OAAAC,EAAQ,MAAAC,EAAO,MAAAC,EAAO,MAAAC,EAAO,OAAAC,EAAQ,OAAAC,EAAQ,cAAAC,EAAe,aAAAC,CAAa,EAAIR,EACrF,SACE,oBACE,oBAAC,OAAK,UAAL,CACC,GAAI,SACJ,MAAM,KACN,MAAOC,EACP,SAAWQ,GAAa,CACtBF,EAAcE,CAAQ,EACtBD,EAAa,EAAE,CACjB,EACF,KACA,OAAC,OAAK,UAAL,CACC,GAAI,QACJ,MAAM,IACN,MAAON,EACP,SAAWO,GAAa,CACtBF,EAAcE,CAAQ,EACtBD,EAAa,CAAC,CAChB,EACF,KACA,OAAC,OAAK,UAAL,CACC,GAAI,QACJ,MAAM,IACN,MAAOL,EACP,SAAWM,GAAa,CACtBF,EAAcE,CAAQ,EACtBD,EAAa,CAAC,CAChB,EACF,KACA,OAAC,OAAK,UAAL,CACC,GAAI,QACJ,MAAM,IACN,MAAOJ,EACP,SAAWK,GAAa,CACtBF,EAAcE,CAAQ,EACtBD,EAAa,CAAC,CAChB,EACF,KACA,OAAC,OAAK,UAAL,CACC,GAAI,SACJ,MAAM,KACN,MAAOH,EACP,SAAWI,GAAa,CACtBF,EAAcE,CAAQ,EACtBD,EAAa,EAAE,CACjB,EACF,KACA,OAAC,OAAK,UAAL,CACC,GAAI,SACJ,MAAM,KACN,MAAOF,EACP,SAAWG,GAAa,CACtBF,EAAcE,CAAQ,EACtBD,EAAa,EAAE,CACjB,EACF,GACF,CAEJ,CCxEA,IAAAE,EAAiD,iBCAjD,IAAAC,EAA2C,wBAGpC,IAAMC,EAA8B,YAClC,mBAAgB,EACpB,KAAK,MAAOC,GAAWC,EAAQD,CAAI,EAAW,MAAME,EAAiB,EAA9BF,CAAgC,EACvE,MAAM,SAAY,MAAME,EAAiB,CAAC,EAC1C,KAAMC,GAAWF,EAAQE,CAAI,EAAW,GAAPA,CAAU,EAC3C,MAAM,IAAM,EAAY,EAGhBC,EAA+B,SACnCF,EAAiB,EACrB,KAAK,MAAOF,GAAWC,EAAQD,CAAI,EAAW,QAAM,mBAAgB,EAA7BA,CAA+B,EACtE,MAAM,SAAY,QAAM,mBAAgB,CAAC,EACzC,KAAMG,GAAWF,EAAQE,CAAI,EAAW,GAAPA,CAAU,EAC3C,MAAM,IAAM,EAAY,EAGvBD,EAAmB,SAAY,CACnC,IAAMG,EAAU,MAAM,YAAU,SAAS,EACzC,OAAOA,GAAoB,EAC7B,ECtBA,IAAAC,EAAoC,wBAQvB,CAAE,WAAAC,EAAY,kBAAAC,EAAmB,YAAAC,EAAa,oBAAAC,CAAoB,KAAI,uBAAiC,EFJ7G,IAAMC,GAAe,IAAM,CAChC,GAAM,CAACC,EAAWC,CAAY,KAAI,YAAiB,EAAE,EAE/CC,KAAY,eAAY,SAAY,CACnCC,GAIHF,EADEG,IAAsB,WACX,MAAMC,EAA4B,EAElC,MAAMC,EAA6B,CAFA,CAIpD,EAAG,CAAC,CAAC,EAEL,sBAAU,IAAM,CACTJ,EAAU,CACjB,EAAG,CAACA,CAAS,CAAC,EAEPF,EAAU,KAAK,CACxB,EGvBA,IAAAO,EAA4F,wBAKxFC,EAAA,6BAHG,SAASC,GAAsBC,EAA+E,CACnH,GAAM,CAAE,uBAAAC,EAAwB,yBAAAC,CAAyB,EAAIF,EAC7D,SACE,QAAC,cAAY,QAAZ,CACE,UAAAC,MACC,OAAC,UACC,KAAM,OAAK,KACX,MAAM,oBACN,SAAU,CAAE,UAAW,CAAC,QAAS,KAAK,EAAG,IAAK,GAAI,EAClD,SAAU,yBACZ,EAEDC,MACC,OAAC,UACC,KAAM,OAAK,KACX,MAAM,sBACN,SAAU,CAAE,UAAW,CAAC,MAAO,KAAK,EAAG,IAAK,GAAI,EAChD,SAAU,2BACZ,GAEJ,CAEJ,CRoDU,IAAAC,EAAA,6BAlEK,SAARC,IAAiC,CACtC,GAAM,CAACC,EAAQC,CAAS,KAAI,YAAiB,EAAE,EACzC,CAACC,EAAOC,CAAQ,KAAI,YAAiB,EAAE,EACvC,CAACC,EAAOC,CAAQ,KAAI,YAAiB,EAAE,EACvC,CAACC,EAAOC,CAAQ,KAAI,YAAiB,EAAE,EACvC,CAACC,EAAQC,CAAS,KAAI,YAAiB,EAAE,EACzC,CAACC,EAAQC,CAAS,KAAI,YAAiB,EAAE,EACzC,CAACC,EAAYC,CAAa,KAAI,YAAiB,EAAE,EACjD,CAACC,EAAWC,CAAY,KAAI,YAAiB,EAAE,EAE/C,CAACC,EAAOC,CAAQ,KAAI,YAAiB,EAAE,EACvC,CAACC,EAAQC,EAAS,KAAI,YAAiB,EAAE,EACzC,CAACC,EAAUC,CAAW,KAAI,YAAiB,IAAI,EAC/C,CAACC,EAAQC,CAAS,KAAI,YAAiB,GAAG,EAC1CC,EAAQC,EAAW,EAEnBC,EAAYC,GAAa,EAC/B,sBAAU,IAAM,CACd,eAAeC,GAAS,CACtBf,EAAca,CAAS,EACvBX,EAAa,EAAE,CACjB,CAEAa,EAAO,EAAE,KAAK,CAChB,EAAG,CAACF,CAAS,CAAC,KAEd,aAAU,IAAM,CACd,eAAeE,GAAS,CACtB,GAAIC,EAAQjB,EAAW,KAAK,CAAC,EAC3BX,EAAU,EAAE,EACZE,EAAS,EAAE,EACXE,EAAS,EAAE,EACXE,EAAS,EAAE,EACXE,EAAU,EAAE,EACZE,EAAU,EAAE,EACZM,EAAS,EAAE,MACN,CACL,IAAMa,EAAaC,EAAiBnB,EAAYE,EAAU,SAAS,EAAG,IAAI,EACpEkB,EAAUC,EAAoBH,CAAU,EAC9C7B,EAAU6B,CAAU,EACpB3B,EAAS6B,EAAQ,SAAS,CAAC,CAAC,EAC5B3B,EAAS2B,EAAQ,SAAS,CAAC,CAAC,EAC5BzB,EAASyB,EAAQ,SAAS,CAAC,CAAC,EAC5BvB,EAAUuB,EAAQ,SAAS,EAAE,CAAC,EAC9BrB,EAAUqB,EAAQ,SAAS,EAAE,CAAC,EAC9Bf,EAASe,EAAQ,SAASlB,CAAS,CAAC,CACtC,CACF,CAEAc,EAAO,EAAE,KAAK,CAChB,EAAG,CAAChB,CAAU,CAAC,KAEf,aAAU,IAAM,CACd,eAAegB,GAAS,CACtBT,GAAUY,EAAiBf,EAAOI,EAAUE,CAAM,CAAC,EACnDT,EAAcG,CAAK,EACnBD,EAAa,SAASK,CAAQ,CAAC,CACjC,CAEAQ,EAAO,EAAE,KAAK,CAChB,EAAG,CAACZ,EAAOI,EAAUE,CAAM,CAAC,KAG1B,QAAC,QACC,WACE,QAAC,eACC,oBAAC,SAAO,gBAAP,CAAuB,MAAO,eAAgB,QAAStB,EAAQ,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EAAG,KAC5G,QAAC,cAAY,QAAZ,CACC,oBAAC,SAAO,gBAAP,CAAuB,MAAO,cAAe,QAASE,EAAO,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EAAG,KAC1G,OAAC,SAAO,gBAAP,CAAuB,MAAO,cAAe,QAASE,EAAO,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EAAG,KAC1G,OAAC,SAAO,gBAAP,CAAuB,MAAO,cAAe,QAASE,EAAO,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EAAG,KAC1G,OAAC,SAAO,gBAAP,CACC,MAAO,eACP,QAASE,EACT,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EAC3C,KACA,OAAC,SAAO,gBAAP,CACC,MAAO,eACP,QAASE,EACT,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EAC3C,EACCwB,MACC,OAAC,SAAO,gBAAP,CACC,MAAO,cACP,QAAShB,EACT,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EAC3C,GAEJ,KACA,OAAC,cAAY,QAAZ,CACC,mBAAC,UACC,KAAM,OAAK,MACX,MAAO,YACP,SAAU,CAAE,UAAW,CAAC,QAAS,KAAK,EAAG,IAAK,WAAY,EAC1D,SAAU,IAAM,CACdL,EAAc,EAAE,EAChBE,EAAa,EAAE,CACjB,EACF,EACF,KACA,OAACoB,GAAA,CAAsB,uBAAwB,GAAM,yBAA0B,GAAM,GACvF,EAGD,UAAAD,GAAeE,IAAwB,UACtC,oBACE,oBAACC,EAAA,CACC,MAAOb,EACP,OAAQN,EACR,cAAe,CAACF,EAAOC,CAAQ,EAC/B,iBAAkB,CAACG,EAAUC,CAAW,EACxC,eAAgB,CAACC,EAAQC,CAAS,EACpC,KACA,OAAC,OAAK,UAAL,EAAe,GAClB,KAEF,OAACe,EAAA,CACC,OAAQtC,EACR,MAAOE,EACP,MAAOE,EACP,MAAOE,EACP,OAAQE,EACR,OAAQE,EACR,cAAeG,EACf,aAAcE,EAChB,EACCmB,GAAeE,IAAwB,aACtC,oBACE,oBAAC,OAAK,UAAL,EAAe,KAChB,OAACC,EAAA,CACC,MAAOb,EACP,OAAQN,EACR,cAAe,CAACF,EAAOC,CAAQ,EAC/B,iBAAkB,CAACG,EAAUC,CAAW,EACxC,eAAgB,CAACC,EAAQC,CAAS,EACpC,GACF,GAEJ,CAEJ",
  "names": ["base_converter_exports", "__export", "BaseConverter", "__toCommonJS", "import_api", "import_react", "isEmpty", "string", "buildBases", "bases", "i", "baseToBaseBigInt", "input", "fromBase", "toBase", "fromBaseNum", "toBaseNum", "bigIntValue", "char", "safeBigIntConverter", "baseString", "import_api", "import_jsx_runtime", "BaseConvertersAdvanceView", "props", "bases", "output", "input", "setInput", "fromBase", "setFromBase", "toBase", "setToBase", "value", "newValue", "isEmpty", "import_api", "import_jsx_runtime", "BaseConvertersSimpleView", "props", "base10", "base2", "base4", "base8", "base16", "base32", "setBaseString", "setBaseRadix", "newValue", "import_react", "import_api", "fetchItemInputSelectedFirst", "text", "isEmpty", "getClipboardText", "item", "fetchItemInputClipboardFirst", "content", "import_api", "autoDetect", "priorityDetection", "advanceView", "advanceViewLocation", "getInputItem", "inputItem", "setInputItem", "fetchData", "autoDetect", "priorityDetection", "fetchItemInputSelectedFirst", "fetchItemInputClipboardFirst", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "props", "showCommandPreferences", "showExtensionPreferences", "import_jsx_runtime", "BaseConverter", "base10", "setBase10", "base2", "setBase2", "base4", "setBase4", "base8", "setBase8", "base16", "setBase16", "base32", "setBase32", "baseString", "setBaseString", "baseRadix", "setBaseRadix", "input", "setInput", "output", "setOutput", "fromBase", "setFromBase", "toBase", "setToBase", "bases", "buildBases", "inputItem", "getInputItem", "_fetch", "isEmpty", "baseNumber", "baseToBaseBigInt", "baseStr", "safeBigIntConverter", "advanceView", "ActionOpenPreferences", "advanceViewLocation", "BaseConvertersAdvanceView", "BaseConvertersSimpleView"]
}
