{
  "version": 3,
  "sources": ["../src/base-converter.tsx", "../src/components/base-converters-advance-view.tsx", "../src/utils/base-converter-utils.ts", "../src/components/base-converters-simple-view.tsx", "../src/components/action-open-preferences.tsx", "../src/types/preferences.ts", "../src/hooks/use-base-converter.ts", "../src/utils/common-utils.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Form, Icon } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { BaseConvertersAdvanceView } from \"./components/base-converters-advance-view\";\nimport { BaseConvertersSimpleView } from \"./components/base-converters-simple-view\";\nimport { ActionOpenPreferences } from \"./components/action-open-preferences\";\nimport { advanceView, advanceViewLocation } from \"./types/preferences\";\nimport useBaseConverter from \"./hooks/use-base-converter\";\n\nexport default function BaseConverter() {\n  const converter = useBaseConverter();\n\n  const [focused, setFocused] = useState({ base: 10, id: 0 });\n  const focusedValue = converter.get(focused.base, focused.id);\n\n  const advancedInputBaseState = useState(10);\n  const [advancedOutputBase, setAdvancedOutputBase] = useState(2);\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.CopyToClipboard\n            title={`Copy Base ${focused.base}`}\n            content={focusedValue}\n            // shortcut={{ modifiers: [\"cmd\"], key: \"enter\" }}\n          />\n          <Action.CopyToClipboard\n            title=\"Copy Base 10\"\n            content={converter.get(10)}\n            shortcut={{ modifiers: [\"cmd\"], key: \"1\" }}\n          />\n          <ActionPanel.Section>\n            <Action.CopyToClipboard\n              title=\"Copy Base 2\"\n              content={converter.get(2)}\n              shortcut={{ modifiers: [\"cmd\"], key: \"2\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Base 4\"\n              content={converter.get(4)}\n              shortcut={{ modifiers: [\"cmd\"], key: \"3\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Base 8\"\n              content={converter.get(8)}\n              shortcut={{ modifiers: [\"cmd\"], key: \"4\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Base 16\"\n              content={converter.get(16)}\n              shortcut={{ modifiers: [\"cmd\"], key: \"5\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Base 32\"\n              content={converter.get(32)}\n              shortcut={{ modifiers: [\"cmd\"], key: \"6\" }}\n            />\n            {advanceView && (\n              <Action.CopyToClipboard\n                title=\"Copy Output\"\n                content={converter.get(advancedOutputBase, 1)}\n                shortcut={{ modifiers: [\"cmd\"], key: \"o\" }}\n              />\n            )}\n          </ActionPanel.Section>\n          <ActionPanel.Section>\n            <Action\n              icon={Icon.Trash}\n              title=\"Clear All\"\n              shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"backspace\" }}\n              onAction={converter.reset}\n            />\n          </ActionPanel.Section>\n          <ActionOpenPreferences showCommandPreferences={true} showExtensionPreferences={true} />\n        </ActionPanel>\n      }\n    >\n      <ConditionalView\n        show={advanceView}\n        reverseOrder={advanceViewLocation === \"Top\"}\n        first={\n          <BaseConvertersSimpleView converter={converter} inputRefs={converter.ref} setFocused={setFocused} key={1} />\n        }\n        second={\n          <BaseConvertersAdvanceView\n            converter={converter}\n            fromBaseState={advancedInputBaseState}\n            toBaseState={[advancedOutputBase, setAdvancedOutputBase]}\n            setFocused={setFocused}\n            key={2}\n          />\n        }\n      />\n    </Form>\n  );\n}\n\nfunction ConditionalView({\n  show,\n  reverseOrder,\n  first,\n  second,\n}: {\n  show: boolean;\n  reverseOrder: boolean;\n  first: JSX.Element;\n  second: JSX.Element;\n}) {\n  if (!show) return first;\n  return reverseOrder ? [second, <Form.Separator key={0} />, first] : [first, <Form.Separator key={0} />, second];\n}\n", "import { Form } from \"@raycast/api\";\nimport { Dispatch, SetStateAction, useMemo, useRef } from \"react\";\nimport { buildBases } from \"../utils/base-converter-utils\";\nimport { BaseConverter } from \"../hooks/use-base-converter\";\n\ntype State = [number, Dispatch<SetStateAction<number>>];\n\nexport function BaseConvertersAdvanceView({\n  converter,\n  fromBaseState: [fromBase, setFromBase],\n  toBaseState: [toBase, setToBase],\n  setFocused,\n}: {\n  converter: BaseConverter;\n  fromBaseState: State;\n  toBaseState: State;\n  setFocused: (v: { base: number; id: number }) => void;\n}) {\n  const bases = useMemo(buildBases, []);\n\n  const inputRef = useRef<Form.TextField>(null);\n  converter.ref.current[36] = useMemo(\n    () => ({\n      focus: () => {\n        setFromBase(36);\n        inputRef.current?.focus();\n      },\n    }),\n    [],\n  );\n\n  return (\n    <>\n      <Form.Dropdown\n        id=\"fromBase\"\n        title=\"From Base\"\n        value={fromBase.toString()}\n        onChange={(v) => setFromBase(parseInt(v))}\n      >\n        {bases.map((base) => (\n          <Form.Dropdown.Item key={base} value={base} title={base} />\n        ))}\n      </Form.Dropdown>\n      <Form.Dropdown id=\"toBase\" title=\"To Base\" value={toBase.toString()} onChange={(v) => setToBase(parseInt(v))}>\n        {bases.map((base) => (\n          <Form.Dropdown.Item key={base} value={base} title={base} />\n        ))}\n      </Form.Dropdown>\n      <Form.TextField\n        id=\"input\"\n        title=\"Input\"\n        value={converter.get(fromBase, 1)}\n        ref={inputRef}\n        onChange={(v) => converter.set(fromBase, v, undefined, 1)}\n        onFocus={() => setFocused({ base: fromBase, id: 1 })}\n      />\n      <Form.Description title=\"Output\" text={converter.get(toBase, 1) + \"\\n\"} />\n    </>\n  );\n}\n", "import { InputsFocusRef } from \"../hooks/use-base-converter\";\n\nexport const buildBases = () => {\n  const bases: string[] = [];\n  for (let i = 2; i <= 36; i++) {\n    bases.push(i.toString());\n  }\n  return bases;\n};\n\nexport const setConverterAuto = (\n  setter: (base: keyof InputsFocusRef, value: string, allowedPrefix?: string, id?: number) => void,\n  n: string,\n): void => {\n  n = n.trim();\n  if (n.startsWith(\"0x\")) {\n    return setter(16, n, \"0x\");\n  }\n  if (n.startsWith(\"0b\")) {\n    return setter(2, n, \"0b\");\n  }\n  if (n.startsWith(\"0o\")) {\n    return setter(8, n, \"0o\");\n  }\n  if (n.match(/[a-zA-Z]/)) {\n    if (n.match(/^[0-9a-vA-V]+$/)) {\n      return setter(32, n);\n    }\n    if (n.match(/^[0-9a-zA-Z]+$/)) {\n      return setter(36, n);\n    }\n  }\n  return setter(10, n);\n};\n", "import { Form } from \"@raycast/api\";\nimport { BaseConverter, InputsFocusRef } from \"../hooks/use-base-converter\";\nimport { MutableRefObject } from \"react\";\n\nexport function BaseConvertersSimpleView({\n  converter,\n  inputRefs,\n  setFocused,\n}: {\n  converter: BaseConverter;\n  inputRefs: MutableRefObject<InputsFocusRef>;\n  setFocused: (v: { base: number; id: number }) => void;\n}) {\n  return (\n    <>\n      <Form.TextField\n        id=\"base10\"\n        title=\"10\"\n        value={converter.get(10)}\n        onChange={(v) => converter.set(10, v)}\n        ref={(r) => (inputRefs.current[10] = r!)}\n        onFocus={() => setFocused({ base: 10, id: 0 })}\n      />\n      <Form.TextField\n        id=\"base2\"\n        title=\"2\"\n        value={converter.get(2)}\n        onChange={(v) => converter.set(2, v, \"0b\")}\n        ref={(r) => (inputRefs.current[2] = r!)}\n        onFocus={() => setFocused({ base: 2, id: 0 })}\n      />\n      <Form.TextField\n        id=\"base4\"\n        title=\"4\"\n        value={converter.get(4)}\n        onChange={(v) => converter.set(4, v)}\n        onFocus={() => setFocused({ base: 4, id: 0 })}\n      />\n      <Form.TextField\n        id=\"base8\"\n        title=\"8\"\n        value={converter.get(8)}\n        onChange={(v) => converter.set(8, v, \"0o\")}\n        ref={(r) => (inputRefs.current[8] = r!)}\n        onFocus={() => setFocused({ base: 8, id: 0 })}\n      />\n      <Form.TextField\n        id=\"base16\"\n        title=\"16\"\n        value={converter.get(16)}\n        onChange={(v) => converter.set(16, v, \"0x\")}\n        ref={(r) => (inputRefs.current[16] = r!)}\n        onFocus={() => setFocused({ base: 16, id: 0 })}\n      />\n      <Form.TextField\n        id=\"base32\"\n        title=\"32\"\n        value={converter.get(32)}\n        onChange={(v) => converter.set(32, v)}\n        ref={(r) => (inputRefs.current[32] = r!)}\n        onFocus={() => setFocused({ base: 32, id: 0 })}\n      />\n    </>\n  );\n}\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences(props: { showCommandPreferences: boolean; showExtensionPreferences: boolean }) {\n  const { showCommandPreferences, showExtensionPreferences } = props;\n  return (\n    <ActionPanel.Section>\n      {showCommandPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Command\"\n          shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n          onAction={openCommandPreferences}\n        />\n      )}\n      {showExtensionPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Extension\"\n          shortcut={{ modifiers: [\"opt\", \"cmd\"], key: \",\" }}\n          onAction={openExtensionPreferences}\n        />\n      )}\n    </ActionPanel.Section>\n  );\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  autoPaste: boolean;\n  asciiCommaSeparated: boolean;\n  advanceView: boolean;\n  advanceViewLocation: string;\n}\nexport const { autoPaste, asciiCommaSeparated, advanceView, advanceViewLocation } = getPreferenceValues<Preferences>();\n", "import { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { parseBigInt } from \"../utils/common-utils\";\nimport { autoPaste } from \"../types/preferences\";\nimport { Clipboard, Form } from \"@raycast/api\";\nimport { setConverterAuto } from \"../utils/base-converter-utils\";\n\nexport type InputsFocusRef = {\n  2: Form.TextField;\n  8: Form.TextField;\n  10: Form.TextField;\n  16: Form.TextField;\n  32: Form.TextField;\n  36?: { focus: () => void }; // in that case custom base needs to be set\n};\n\nexport type BaseConverter = {\n  get: (base: number, id?: number) => string;\n  set: (base: number, value: string, allowedPrefix?: string, id?: number) => void;\n  reset: () => void;\n  ref: MutableRefObject<InputsFocusRef>;\n};\n\ntype Override = { base: number; value: string; id: number };\n\nexport default function useBaseConverter(): BaseConverter {\n  const [value, setValue] = useState<null | bigint>(null);\n  const [override, setOverride] = useState<null | Override>(null);\n  const ref = useRef<InputsFocusRef>({} as InputsFocusRef); // remember to assign ref 36\n\n  useEffect(() => {\n    if (autoPaste) {\n      Clipboard.readText().then((text) => {\n        if (text) {\n          setConverterAuto((base, value, allowedPrefix, id) => {\n            if (ref.current[base]) {\n              // advanced view enabled\n              set(base, value, allowedPrefix, id);\n              ref.current[base].focus();\n            } else {\n              // advanced view disabled\n              set(10, value, allowedPrefix, id);\n              ref.current[10].focus();\n            }\n          }, text);\n        }\n      });\n    }\n  }, []);\n\n  // `id` distinguishes different input fields with the same base.\n  // This is useful when, in advanced view, user selects e.g. base 10\n  // and inputs invalid value. In that case we don't want to display invalid\n  // value in simple view base 10 input, so we give them different ids.\n\n  const get = (base: number, id: number = 0): string => {\n    if (override !== null && override.base == base && override.id == id) {\n      return override.value;\n    }\n    return value?.toString(base) ?? \"\";\n  };\n\n  const set = (base: number, value: string, allowedPrefix?: string, id: number = 0) => {\n    setOverride({ base, value, id });\n    value = value.trim();\n    if (allowedPrefix && value.startsWith(allowedPrefix)) {\n      value = value.substring(allowedPrefix.length);\n    }\n    setValue(parseBigInt(value, base));\n  };\n\n  const reset = () => {\n    setValue(null);\n    setOverride(null);\n  };\n\n  return { get, set, reset, ref };\n}\n", "export const parseBigInt = (string: string, radix: number): bigint | null => {\n  if (string.length == 0) {\n    return null;\n  }\n  let value = BigInt(0);\n  for (const char of string) {\n    const digit = parseInt(char, radix);\n    if (isNaN(digit)) {\n      return null;\n    }\n    value = value * BigInt(radix) + BigInt(digit);\n  }\n  return value;\n};\n"],
  "mappings": "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",
  "names": ["base_converter_exports", "__export", "BaseConverter", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "buildBases", "bases", "i", "setConverterAuto", "setter", "n", "import_jsx_runtime", "BaseConvertersAdvanceView", "converter", "fromBase", "setFromBase", "toBase", "setToBase", "setFocused", "bases", "buildBases", "inputRef", "v", "base", "import_api", "import_jsx_runtime", "BaseConvertersSimpleView", "converter", "inputRefs", "setFocused", "v", "r", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "props", "showCommandPreferences", "showExtensionPreferences", "import_api", "autoPaste", "asciiCommaSeparated", "advanceView", "advanceViewLocation", "import_react", "parseBigInt", "string", "radix", "value", "char", "digit", "import_api", "useBaseConverter", "value", "setValue", "override", "setOverride", "ref", "autoPaste", "text", "setConverterAuto", "base", "allowedPrefix", "id", "set", "get", "parseBigInt", "import_jsx_runtime", "BaseConverter", "converter", "useBaseConverter", "focused", "setFocused", "focusedValue", "advancedInputBaseState", "advancedOutputBase", "setAdvancedOutputBase", "advanceView", "ActionOpenPreferences", "ConditionalView", "advanceViewLocation", "BaseConvertersSimpleView", "BaseConvertersAdvanceView", "show", "reverseOrder", "first", "second"]
}
