{
  "version": 3,
  "sources": ["../src/code-converter.tsx", "../src/utils/common-utils.ts", "../src/utils/code-converter-utils.ts", "../src/hooks/get-input-item.ts", "../src/utils/input-item-utils.ts", "../src/types/preferences.ts", "../src/components/action-open-preferences.tsx"],
  "sourcesContent": ["import { Action, ActionPanel, Form, Icon } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { isEmpty } from \"./utils/common-utils\";\nimport { buildUnicode, chineseUtf8ToNative, unicodesToNative } from \"./utils/code-converter-utils\";\nimport { getInputItem } from \"./hooks/get-input-item\";\nimport { ActionOpenPreferences } from \"./components/action-open-preferences\";\n\nexport default function CodeConverter() {\n  const [native, setNative] = useState<string>(\"\");\n  const [unicode, setUnicode] = useState<string>(\"\");\n  const [ascii, setAscii] = useState<string>(\"\");\n  const [utf8, setUtf8] = useState<string>(\"\");\n  const [chineseUtf8, setChineseUtf8] = useState<string>(\"\");\n  const [base64, setBase64] = useState<string>(\"\");\n  const [url, setUrl] = useState<string>(\"\");\n\n  const inputItem = getInputItem();\n  useEffect(() => {\n    async function _fetch() {\n      setNative(inputItem);\n    }\n\n    _fetch().then();\n  }, [inputItem]);\n\n  useEffect(() => {\n    async function _fetchDetail() {\n      try {\n        if (native.includes(\"\\uD800\") || native.includes(\"\\uDFFF\")) return;\n        let _ascii = \"\";\n        let _unicode = \"\";\n        let _chineseUtf8 = \"\";\n        native.split(\"\").forEach((char) => {\n          _ascii += char.charCodeAt(0);\n          const _u = buildUnicode(char);\n          _unicode += \"\\\\u\" + _u;\n          _chineseUtf8 += \"&#x\" + _u + \";\";\n        });\n        setAscii(_ascii);\n        setUnicode(_unicode);\n        setUtf8(encodeURIComponent(native).replaceAll(\"%\", \"\\\\x\"));\n        setChineseUtf8(_chineseUtf8);\n        setBase64(Buffer.from(native, \"utf-8\").toString(\"base64\"));\n        setUrl(encodeURIComponent(native));\n      } catch (e) {\n        console.error(String(e));\n      }\n    }\n\n    _fetchDetail().then();\n  }, [native]);\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.CopyToClipboard title={\"Copy Native\"} content={native} shortcut={{ modifiers: [\"cmd\"], key: \"1\" }} />\n          <ActionPanel.Section>\n            <Action.CopyToClipboard\n              title={\"Copy Unicode\"}\n              content={unicode}\n              shortcut={{ modifiers: [\"cmd\"], key: \"2\" }}\n            />\n            <Action.CopyToClipboard title={\"Copy UTF-8\"} content={utf8} shortcut={{ modifiers: [\"cmd\"], key: \"3\" }} />\n            <Action.CopyToClipboard title={\"Copy ASCII\"} content={ascii} shortcut={{ modifiers: [\"cmd\"], key: \"4\" }} />\n            <Action.CopyToClipboard\n              title={\"Copy &#xXXXX;\"}\n              content={chineseUtf8}\n              shortcut={{ modifiers: [\"cmd\"], key: \"5\" }}\n            />\n            <Action.CopyToClipboard\n              title={\"Copy Base64\"}\n              content={base64}\n              shortcut={{ modifiers: [\"cmd\"], key: \"6\" }}\n            />\n            <Action.CopyToClipboard\n              title={\"Copy Encoded URL\"}\n              content={url}\n              shortcut={{ modifiers: [\"cmd\"], key: \"7\" }}\n            />\n          </ActionPanel.Section>\n          <ActionPanel.Section>\n            <Action\n              icon={Icon.Trash}\n              title={\"Clear All\"}\n              shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"backspace\" }}\n              onAction={() => {\n                setNative(\"\");\n              }}\n            />\n          </ActionPanel.Section>\n          <ActionOpenPreferences showCommandPreferences={false} showExtensionPreferences={true} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id={\"Native\"} title=\"Native\" value={native} placeholder={\"String\"} onChange={setNative} />\n      <Form.TextField\n        id={\"Unicode\"}\n        title=\"Unicode\"\n        value={unicode}\n        placeholder={\"\\\\u0031\"}\n        onChange={(newValue) => {\n          setNative(unicodesToNative(newValue));\n        }}\n      />\n      <Form.TextField\n        id={\"Base64\"}\n        title=\"Base64\"\n        value={base64}\n        placeholder={\"MQ==\"}\n        onChange={(newValue) => {\n          if (!isEmpty(newValue.trim())) {\n            setNative(Buffer.from(newValue, \"base64\").toString(\"utf-8\"));\n          }\n        }}\n      />\n      <Form.TextField\n        id={\"UTF-8\"}\n        title=\"UTF-8\"\n        value={utf8}\n        placeholder={\"\\\\xE4\\\\xBD\\\\xA0\\\\xE5\\\\xA5\\\\xBD\"}\n        info={\"Letters and numbers will not be transcode to UTF-8\"}\n        onChange={(newValue) => {\n          try {\n            setNative(decodeURIComponent(newValue.replaceAll(\"\\\\x\", \"%\")));\n          } catch (e) {\n            console.error(String(e));\n          }\n        }}\n      />\n      <Form.TextField\n        id={\"ASCII\"}\n        title=\"ASCII\"\n        value={ascii}\n        placeholder={\"Number\"}\n        info={\"Only ASCII greater than 13 is supported\"}\n        onChange={(newValue) => {\n          if (!isEmpty(newValue.trim()) && Number(newValue.trim()) > 13) {\n            setNative(String.fromCharCode(Number(newValue.trim())));\n          }\n        }}\n      />\n      <Form.TextField\n        id={\"&#xXXXX;\"}\n        title=\"&#xXXXX;\"\n        value={chineseUtf8}\n        placeholder={\"&#xXXXX;\"}\n        info={\"Chinese to &#xXXXX;\"}\n        onChange={(newValue) => {\n          if (!isEmpty(newValue.trim())) {\n            setNative(chineseUtf8ToNative(newValue));\n          }\n        }}\n      />\n      <Form.TextField\n        id={\"Encoded URL\"}\n        title=\"Encoded URL\"\n        value={url}\n        placeholder={\"https%3A%2F%2Fwww.raycast.com\"}\n        info={\"URLs encoded with encodeURIComponent\"}\n        onChange={(newValue) => {\n          if (!isEmpty(newValue.trim())) {\n            setNative(decodeURIComponent(newValue));\n          }\n        }}\n      />\n    </Form>\n  );\n}\n", "export const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n", "import { isEmpty } from \"./common-utils\";\n\n//single char\nexport const buildUnicode = (char: string) => {\n  const _u = char.charCodeAt(0).toString(16);\n  const affixLength = 4 - _u.length;\n  const affix = \"0\".repeat(affixLength);\n  return affix + _u;\n};\n\n//single unicode\nexport const unicodeToNative = (unicode: string) => {\n  return String.fromCharCode(parseInt(unicode, 16));\n};\n\n//unicodes\nexport const unicodesToNative = (unicodes: string) => {\n  if (isEmpty(unicodes.trim())) return \"\";\n  let _native = \"\";\n  unicodes\n    .trim()\n    .split(\"\\\\u\")\n    .forEach((value) => {\n      if (isEmpty(value)) return;\n      _native += unicodeToNative(value);\n    });\n  return _native;\n};\n\n//utf-8 unicode\nexport const chineseUtf8ToNative = (utf8: string) => {\n  if (isEmpty(utf8.trim())) return \"\";\n  let _native = \"\";\n  utf8\n    .trim()\n    .replaceAll(\";\", \"\")\n    .split(\"&#x\")\n    .forEach((value) => {\n      if (isEmpty(value)) return;\n      _native += unicodeToNative(value);\n    });\n  return _native;\n};\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { fetchItemInputClipboardFirst, fetchItemInputSelectedFirst } from \"../utils/input-item-utils\";\nimport { autoDetect, priorityDetection } from \"../types/preferences\";\n\nexport const getInputItem = () => {\n  const [inputItem, setInputItem] = useState<string>(\"\");\n\n  const fetchData = useCallback(async () => {\n    if (!autoDetect) {\n      return;\n    }\n    if (priorityDetection === \"selected\") {\n      setInputItem(await fetchItemInputSelectedFirst());\n    } else {\n      setInputItem(await fetchItemInputClipboardFirst());\n    }\n  }, []);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return inputItem.trim();\n};\n", "import { Clipboard, getSelectedText } from \"@raycast/api\";\nimport { isEmpty } from \"./common-utils\";\n\nexport const fetchItemInputSelectedFirst = async () => {\n  return getSelectedText()\n    .then(async (text) => (!isEmpty(text) ? text : await getClipboardText()))\n    .catch(async () => await getClipboardText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nexport const fetchItemInputClipboardFirst = async () => {\n  return getClipboardText()\n    .then(async (text) => (!isEmpty(text) ? text : await getSelectedText()))\n    .catch(async () => await getSelectedText())\n    .then((item) => (!isEmpty(item) ? item : \"\"))\n    .catch(() => \"\" as string);\n};\n\nconst getClipboardText = async () => {\n  const content = await Clipboard.readText();\n  return content ? content : \"\";\n};\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  autoDetect: boolean;\n  priorityDetection: string;\n  advanceView: boolean;\n  advanceViewLocation: string;\n}\nexport const { autoDetect, priorityDetection, advanceView, advanceViewLocation } = getPreferenceValues<Preferences>();\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences(props: { showCommandPreferences: boolean; showExtensionPreferences: boolean }) {\n  const { showCommandPreferences, showExtensionPreferences } = props;\n  return (\n    <ActionPanel.Section>\n      {showCommandPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Command\"\n          shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n          onAction={openCommandPreferences}\n        />\n      )}\n      {showExtensionPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Extension\"\n          shortcut={{ modifiers: [\"opt\", \"cmd\"], key: \",\" }}\n          onAction={openExtensionPreferences}\n        />\n      )}\n    </ActionPanel.Section>\n  );\n}\n"],
  "mappings": "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",
  "names": ["code_converter_exports", "__export", "CodeConverter", "__toCommonJS", "import_api", "import_react", "isEmpty", "string", "buildUnicode", "char", "_u", "affixLength", "unicodeToNative", "unicode", "unicodesToNative", "unicodes", "isEmpty", "_native", "value", "chineseUtf8ToNative", "utf8", "import_react", "import_api", "fetchItemInputSelectedFirst", "text", "isEmpty", "getClipboardText", "item", "fetchItemInputClipboardFirst", "content", "import_api", "autoDetect", "priorityDetection", "advanceView", "advanceViewLocation", "getInputItem", "inputItem", "setInputItem", "fetchData", "autoDetect", "priorityDetection", "fetchItemInputSelectedFirst", "fetchItemInputClipboardFirst", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "props", "showCommandPreferences", "showExtensionPreferences", "import_jsx_runtime", "CodeConverter", "native", "setNative", "unicode", "setUnicode", "ascii", "setAscii", "utf8", "setUtf8", "chineseUtf8", "setChineseUtf8", "base64", "setBase64", "url", "setUrl", "inputItem", "getInputItem", "_fetch", "_fetchDetail", "_ascii", "_unicode", "_chineseUtf8", "char", "_u", "buildUnicode", "e", "ActionOpenPreferences", "newValue", "unicodesToNative", "isEmpty", "chineseUtf8ToNative"]
}
