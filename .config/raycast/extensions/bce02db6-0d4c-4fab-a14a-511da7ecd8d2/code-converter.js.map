{
  "version": 3,
  "sources": ["../src/code-converter.tsx", "../src/components/action-open-preferences.tsx", "../src/hooks/use-code-converter.ts", "../src/types/preferences.ts", "../src/utils/code-converter-utils.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Form, Icon } from \"@raycast/api\";\nimport { ActionOpenPreferences } from \"./components/action-open-preferences\";\nimport useCodeConverter from \"./hooks/use-code-converter\";\n\nexport default function CodeConverter() {\n  const converter = useCodeConverter();\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.CopyToClipboard\n            title=\"Copy Native\"\n            content={converter.get(\"native\")}\n            shortcut={{ modifiers: [\"cmd\"], key: \"1\" }}\n          />\n          <ActionPanel.Section>\n            <Action.CopyToClipboard\n              title=\"Copy Unicode\"\n              content={converter.get(\"unicode\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"2\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Utf-8\"\n              content={converter.get(\"utf8\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"3\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Ascii\"\n              content={converter.get(\"ascii\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"4\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Hex\"\n              content={converter.get(\"hex\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"5\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Entity\"\n              content={converter.get(\"entity\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"6\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Base64\"\n              content={converter.get(\"base64\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"7\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Encoded URL\"\n              content={converter.get(\"url\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"8\" }}\n            />\n            <Action.CopyToClipboard\n              title=\"Copy Html Entity\"\n              content={converter.get(\"entity\")}\n              shortcut={{ modifiers: [\"cmd\"], key: \"9\" }}\n            />\n          </ActionPanel.Section>\n          <ActionPanel.Section>\n            <Action\n              icon={Icon.Trash}\n              title=\"Clear All\"\n              shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"backspace\" }}\n              onAction={converter.reset}\n            />\n          </ActionPanel.Section>\n          <ActionOpenPreferences showCommandPreferences={true} showExtensionPreferences={true} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        id=\"Native\"\n        title=\"Native\"\n        value={converter.get(\"native\")}\n        placeholder=\"String\"\n        onChange={(v) => converter.set(\"native\", v)}\n      />\n      <Form.TextField\n        id=\"Unicode\"\n        title=\"Unicode\"\n        value={converter.get(\"unicode\")}\n        placeholder=\"\\\\u0031\"\n        onChange={(v) => converter.set(\"unicode\", v)}\n      />\n      <Form.TextField\n        id=\"Base64\"\n        title=\"Base64\"\n        value={converter.get(\"base64\")}\n        placeholder=\"MQ==\"\n        onChange={(v) => converter.set(\"base64\", v)}\n      />\n      <Form.TextField\n        id=\"UTF-8\"\n        title=\"UTF-8\"\n        value={converter.get(\"utf8\")}\n        placeholder=\"\\\\xE4\\\\xBD\\\\xA0\\\\xE5\\\\xA5\\\\xBD\"\n        info=\"Letters and numbers will not be transcode to UTF-8\"\n        onChange={(v) => converter.set(\"utf8\", v)}\n      />\n      <Form.TextField\n        id=\"ASCII\"\n        title=\"ASCII\"\n        value={converter.get(\"ascii\")}\n        placeholder=\"Number\"\n        info=\"Only ASCII greater than 13 is supported\"\n        onChange={(v) => converter.set(\"ascii\", v)}\n      />\n      <Form.TextField\n        id=\"Hex\"\n        title=\"Hex\"\n        value={converter.get(\"hex\")}\n        placeholder=\"0x0\"\n        onChange={(v) => converter.set(\"hex\", v)}\n      />\n      <Form.TextField\n        id=\"Encoded URL\"\n        title=\"Encoded URL\"\n        value={converter.get(\"url\")}\n        placeholder=\"https%3A%2F%2Fwww.raycast.com\"\n        info=\"URLs encoded with encodeURIComponent\"\n        onChange={(v) => converter.set(\"url\", v)}\n      />\n      <Form.TextField\n        id=\"HTML entity\"\n        title=\"HTML entity\"\n        value={converter.get(\"entity\")}\n        placeholder=\"&#xXXXX;\"\n        info=\"HTML entity encoded with &#xXXXX;\"\n        onChange={(v) => converter.set(\"entity\", v)}\n      />\n    </Form>\n  );\n}\n", "import { Action, ActionPanel, Icon, openCommandPreferences, openExtensionPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences(props: { showCommandPreferences: boolean; showExtensionPreferences: boolean }) {\n  const { showCommandPreferences, showExtensionPreferences } = props;\n  return (\n    <ActionPanel.Section>\n      {showCommandPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Command\"\n          shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n          onAction={openCommandPreferences}\n        />\n      )}\n      {showExtensionPreferences && (\n        <Action\n          icon={Icon.Gear}\n          title=\"Configure Extension\"\n          shortcut={{ modifiers: [\"opt\", \"cmd\"], key: \",\" }}\n          onAction={openExtensionPreferences}\n        />\n      )}\n    </ActionPanel.Section>\n  );\n}\n", "import { useEffect, useReducer } from \"react\";\nimport {\n  asciiToNative,\n  base64ToNative,\n  entityToNative,\n  hexToNative,\n  nativeToAscii,\n  nativeToBase64,\n  nativeToEntity,\n  nativeToHex,\n  nativeToUnicode,\n  nativeToUrl,\n  nativeToUtf8,\n  unicodeToNative,\n  urlToNative,\n  utf8ToNative,\n} from \"../utils/code-converter-utils\";\nimport { autoPaste } from \"../types/preferences\";\nimport { Clipboard } from \"@raycast/api\";\n\nconst conversions = [\n  [\"unicode\", unicodeToNative, nativeToUnicode],\n  [\"ascii\", asciiToNative, nativeToAscii],\n  [\"hex\", hexToNative, nativeToHex],\n  [\"utf8\", utf8ToNative, nativeToUtf8],\n  [\"entity\", entityToNative, nativeToEntity],\n  [\"base64\", base64ToNative, nativeToBase64],\n  [\"url\", urlToNative, nativeToUrl],\n] as const;\n\nexport type CodeType = (typeof conversions)[number][0] | \"native\";\n\nexport type CodeConverter = {\n  get: (type: CodeType) => string;\n  set: (type: CodeType, value: string) => void;\n  reset: () => void;\n};\n\ntype State = {\n  [key in CodeType]: string;\n};\ntype Action =\n  | {\n      type: CodeType;\n      value: string;\n    }\n  | { type: \"reset\" };\n\nfunction getInitial() {\n  const val = { native: \"\" } as State;\n  for (const [type] of conversions) {\n    val[type] = \"\";\n  }\n  return val;\n}\n\nfunction reducer(state: State, action: Action): State {\n  if (action.type == \"reset\") return getInitial();\n\n  const newState = { [action.type]: action.value } as State;\n  if (action.type != \"native\") {\n    let toNativeConverter;\n    for (const [type, toNative] of conversions) {\n      if (type == action.type) toNativeConverter = toNative;\n    }\n    newState[\"native\"] = (toNativeConverter as (s: string) => string)(action.value);\n  }\n  const native = newState[\"native\"];\n  for (const [type, _, fromNative] of conversions) {\n    if (type != action.type) {\n      newState[type] = fromNative(native);\n    }\n  }\n  return newState;\n}\n\nexport default function useCodeConverter(): CodeConverter {\n  const [state, dispatch] = useReducer(reducer, null, getInitial);\n\n  useEffect(() => {\n    if (autoPaste) {\n      Clipboard.readText().then((text) => (text ? set(\"native\", text) : null));\n    }\n  }, []);\n\n  const get = (type: CodeType) => state[type];\n\n  const set = (type: CodeType, value: string) => dispatch({ type, value });\n\n  const reset = () => dispatch({ type: \"reset\" });\n\n  return { get, set, reset };\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  autoPaste: boolean;\n  asciiCommaSeparated: boolean;\n  advanceView: boolean;\n  advanceViewLocation: string;\n}\nexport const { autoPaste, asciiCommaSeparated, advanceView, advanceViewLocation } = getPreferenceValues<Preferences>();\n", "import { asciiCommaSeparated } from \"../types/preferences\";\n\n// unicode\n\nexport const nativeToUnicode = (native: string) => {\n  let unicode = \"\";\n  for (let i = 0; i < native.length; i++) {\n    const _u = native.charCodeAt(i).toString(16);\n    const affixLength = 4 - _u.length;\n    const affix = \"0\".repeat(affixLength);\n    unicode += \"\\\\u\" + affix + _u;\n  }\n  return unicode;\n};\n\nexport const unicodeToNative = (unicode: string) => {\n  unicode = unicode.trim();\n  let native = \"\";\n  unicode.split(\"\\\\u\").forEach((value) => {\n    if (value == \"\") return;\n    native += String.fromCharCode(parseInt(value, 16));\n  });\n  return native;\n};\n\n// base64\n\nexport const nativeToBase64 = (native: string) => {\n  return Buffer.from(native, \"utf-8\").toString(\"base64\");\n};\n\nexport const base64ToNative = (base64: string) => {\n  return Buffer.from(base64.trim(), \"base64\").toString(\"utf-8\");\n};\n\n// utf-8\n\nexport const nativeToUtf8 = (native: string) => {\n  return encodeURIComponent(native).replaceAll(\"%\", \"\\\\x\");\n};\n\nexport const utf8ToNative = (utf8: string) => {\n  try {\n    return decodeURIComponent(utf8.replaceAll(\"\\\\x\", \"%\"));\n  } catch (e) {\n    return \"\";\n  }\n};\n\n// ascii\n\nexport const nativeToAscii = (native: string) => {\n  let ascii = \"\";\n  for (const char of native) {\n    if (asciiCommaSeparated && ascii != \"\") ascii += \",\";\n    ascii += char.charCodeAt(0).toString();\n  }\n  return ascii;\n};\n\nexport const asciiToNative = (ascii: string) => {\n  ascii = ascii.trim();\n  if (asciiCommaSeparated) {\n    return ascii\n      .split(\",\")\n      .map((charCodeStr) => {\n        const charCode = parseInt(charCodeStr);\n        if (isNaN(charCode)) return \"\";\n        return String.fromCharCode(charCode);\n      })\n      .join(\"\");\n  } else {\n    let acc = \"\";\n    let native = \"\";\n    for (const char of ascii) {\n      acc += char;\n      const accInt = parseInt(acc);\n      if (!isNaN(accInt) && accInt > 13) {\n        native += String.fromCharCode(accInt);\n        acc = \"\";\n      }\n    }\n    return native;\n  }\n};\n\n// hex\n\nexport const nativeToHex = (native: string) => {\n  if (native.length == 0) return \"\";\n  let hex = \"0x\";\n  for (const char of native) {\n    const c = char.charCodeAt(0).toString(16).padStart(2, \"0\");\n    hex += c.length > 2 ? `[${c}]` : c;\n  }\n  return hex;\n};\n\nexport const hexToNative = (hex: string) => {\n  hex = hex.trim();\n  if (hex.startsWith(\"0x\")) hex = hex.substring(2);\n  const hexes = [];\n  let accumulatedUnknownChar = 0;\n  let isUnknownCharSequence = false;\n  for (let i = 0; i < hex.length; i++) {\n    const char = parseInt(hex[i], 16);\n    if (isNaN(char)) {\n      if (hex[i] == \"[\") isUnknownCharSequence = true;\n      else if (hex[i] == \"]\") {\n        isUnknownCharSequence = false;\n        hexes.push(0);\n        hexes.push(accumulatedUnknownChar);\n        accumulatedUnknownChar = 0;\n      }\n      continue;\n    }\n    if (isUnknownCharSequence) {\n      accumulatedUnknownChar = accumulatedUnknownChar * 16 + char;\n    } else {\n      // omit trailing zeros\n      if (hexes.length == 0 && char == 0) continue;\n      hexes.push(char);\n    }\n  }\n  if (hexes.length % 2 == 1) hexes.unshift(0);\n  let native = \"\";\n  for (let i = 0; i < hexes.length; i += 2) {\n    native += String.fromCharCode(hexes[i + 1] + 16 * hexes[i]);\n  }\n  return native;\n};\n\n// url\n\nexport const urlToNative = (url: string) => {\n  try {\n    return decodeURIComponent(url);\n  } catch (e) {\n    return \"\";\n  }\n};\n\nexport const nativeToUrl = encodeURIComponent;\n\n// entity\n\nexport const entityToNative = (utf8: string) => {\n  utf8 = utf8.trim();\n  if (utf8.length == 0) return \"\";\n  return utf8\n    .replaceAll(\";\", \"\")\n    .split(\"&#x\")\n    .map((value) => (value.length == 0 ? \"\" : String.fromCharCode(parseInt(value, 16))))\n    .join(\"\");\n};\n\nexport const nativeToEntity = (native: string) => {\n  return native\n    .split(\"\")\n    .map((char) => {\n      const u = char.charCodeAt(0).toString(16);\n      const affixLength = 4 - u.length;\n      return \"&#x\" + \"0\".repeat(affixLength) + u + \";\";\n    })\n    .join(\"\");\n};\n"],
  "mappings": "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",
  "names": ["code_converter_exports", "__export", "CodeConverter", "__toCommonJS", "import_api", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "props", "showCommandPreferences", "showExtensionPreferences", "import_react", "import_api", "autoPaste", "asciiCommaSeparated", "advanceView", "advanceViewLocation", "nativeToUnicode", "native", "unicode", "i", "_u", "affixLength", "affix", "unicodeToNative", "value", "nativeToBase64", "base64ToNative", "base64", "nativeToUtf8", "utf8ToNative", "utf8", "nativeToAscii", "ascii", "char", "asciiCommaSeparated", "asciiToNative", "charCodeStr", "charCode", "acc", "accInt", "nativeToHex", "hex", "c", "hexToNative", "hexes", "accumulatedUnknownChar", "isUnknownCharSequence", "urlToNative", "url", "nativeToUrl", "entityToNative", "nativeToEntity", "u", "import_api", "conversions", "unicodeToNative", "nativeToUnicode", "asciiToNative", "nativeToAscii", "hexToNative", "nativeToHex", "utf8ToNative", "nativeToUtf8", "entityToNative", "nativeToEntity", "base64ToNative", "nativeToBase64", "urlToNative", "nativeToUrl", "getInitial", "val", "type", "reducer", "state", "action", "newState", "toNativeConverter", "toNative", "native", "_", "fromNative", "useCodeConverter", "dispatch", "autoPaste", "text", "set", "get", "value", "import_jsx_runtime", "CodeConverter", "converter", "useCodeConverter", "ActionOpenPreferences", "v"]
}
